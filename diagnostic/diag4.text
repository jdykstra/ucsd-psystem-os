(*
 * UCSD PASCAL - Version I.5
 * Copyright (C) 1978, 1979 Regents of the University of California
 * All Rights Reserved
 *
 * Permission to use, copy, modify and distribute any part of UCSD
 * PASCAL solely authored by UC authors before June 1, 1979 for
 * educational, research and non-profit purposes, without fee, and
 * without a written agreement is hereby granted, provided that the
 * above copyright notice, this paragraph and the following three
 * paragraphs appear in all copies.
 *
 * Those desiring to incorporate UCSD PASCAL into commercial products or
 * use for commercial purposes should contact the Technology Transfer &
 * Intellectual Property Services, University of California, San Diego,
 * 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910,
 * Ph: (858) 534-5815, Fax: (858) 534-7345, E-Mail: invent@ucsd.edu.
 *
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
 * FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES,
 * INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF UCSD PASCAL, EVEN IF
 * THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
 * THE SOFTWARE PROVIDED HEREIN IS ON AN "AS IS" BASIS, AND THE UNIVERSITY
 * OF CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,
 * UPDATES, ENHANCEMENTS, OR MODIFICATIONS. THE UNIVERSITY OF CALIFORNIA
 * MAKES NO REPRESENTATIONS AND EXTENDS NO WARRANTIES OF ANY KIND,
 * EITHER IMPLIED OR EXPRESS, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR
 * THAT THE USE OF UCSD PASCAL WILL NOT INFRINGE ANY PATENT, TRADEMARK OR
 * OTHER RIGHTS.
 *
 * Case Number: SD1991-807 (2006)
 * http://invent.ucsd.edu/technology/cases/1995-prior/SD1991-807.shtml
 *)

(*
 * UCSD p-System Operating System
 * Copyright (C) 2010 Peter Miller
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *   * Neither the name of the ucsd-psystem-os project nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *)

(* This is an unpublished work copyright by the Regents of
   the University of California. This item is the property of SofTech
   Microsystems Inc., and it may be used, copied or distributed only
   as permitted in a written license from that company. *)

(************************************************************************)

PROCEDURE EQUPOWRNEQPOWR;

  type set40 = set of 0..39;

  procedure eq(a, b: set40; expect: boolean);
  begin
    chk((a = b) = expect);
  end;

  procedure ne(a, b: set40; expect: boolean);
  begin
    chk((a <> b) = expect);
  end;

BEGIN
  CHK(INIT);

  DESCRIPTION('EQUPOWR [0, 9, 13, 17]=[0, 9, 13, 17]');
  eq([0, 9, 13, 17], [0, 9, 13, 17], true);

  DESCRIPTION('EQUPOWR [0, 9, 13, 17, 34]=[0, 9, 13, 17]');
  eq([0, 9, 13, 17], [0, 9, 13, 17, 34], false);

  DESCRIPTION('EQUPOWR [0, 9, 13, 17, 34]=[0, 9, 13, 17]');
  eq([0, 9, 13, 17, 34], [0, 9, 13, 17], false);

  DESCRIPTION('EQUPOWR [0]=[1]');
  eq([0], [1], false);

  DESCRIPTION('EQUPOWR []=[]');
  eq([], [], true);

  DESCRIPTION('EQUPOWR []=[3]');
  eq([], [3], false);

  DESCRIPTION('EQUPOWR [5]=[]');
  eq([5], [], false);

  DESCRIPTION('EQUPOWR [1, 7, 10]=[17, 23, 26]');
  eq([1, 7, 10], [17, 23, 26], false);

  DESCRIPTION('EQUPOWR [17, 23, 26]=[1, 7, 10]');
  eq([17, 23, 26], [1, 7, 10], false);

  DESCRIPTION('NEQPOWR [0, 9, 13, 17]<>[0, 9, 13, 17]');
  ne([0, 9, 13, 17], [0, 9, 13, 17], false);

  DESCRIPTION('NEQPOWR [0, 9, 13, 17]<>[0, 9, 13, 17, 34]');
  ne([0, 9, 13, 17], [0, 9, 13, 17, 34], true);

  DESCRIPTION('NEQPOWR [0, 9, 13, 17, 34]<>[0, 9, 13, 17]');
  ne([0, 9, 13, 17, 34], [0, 9, 13, 17], true);

  DESCRIPTION('NEQPOWR [0]<>[1]');
  ne([0], [1], true);

  DESCRIPTION('NEQPOWR []<>[]');
  ne([], [], false);

  DESCRIPTION('NEQPOWR []<>[3]');
  ne([], [3], true);

  DESCRIPTION('NEQPOWR [5]<>[]');
  ne([5], [], true);

  DESCRIPTION('NEQPOWR [1, 7, 10]<>[17, 23, 26]');
  ne([1, 7, 10], [17, 23, 26], true);

  DESCRIPTION('NEQPOWR [17, 23, 26]<>[1, 7, 10]');
  ne([17, 23, 26], [1, 7, 10], true);
END;

(************************************************************************)

PROCEDURE GEQPOWRLEQPOWR;

  type set40 = set of 0..54;

  procedure ge(a, b: set40; expect: boolean);
  begin
    chk((a >= b) = expect);
  end;

  procedure le(a, b: set40; expect: boolean);
  begin
    chk((a <= b) = expect);
  end;

BEGIN
  CHK(INIT);

  DESCRIPTION('GEQPOWR [1, 3, 7, 10]>=[1, 3, 7, 10]');
  ge([1, 3, 7, 10], [1, 3, 7, 10], true);

  DESCRIPTION('GEQPOWR [1, 4, 7, 13, 37, 52]>=[1, 4, 7, 31, 37, 52]');
  ge([1, 4, 7, 13, 37, 52], [1, 4, 7, 31, 37, 52], false);

  DESCRIPTION('GEQPOWR [1, 5, 12, 19, 34]>=[1, 5, 12, 19, 34]');
  ge([1, 5, 12, 19, 34], [1, 5, 12, 19, 34], true);

  DESCRIPTION('GEQPOWR []>=[]');
  ge([], [], true);

  DESCRIPTION('GEQPOWR [1, 5]>=[1, 5, 18]');
  ge([1, 5], [1, 5, 18], false);

  DESCRIPTION('GEQPOWR []>=[1, 5]');
  ge([], [1, 5], false);

  DESCRIPTION('GEQPOWR [0]>=[]');
  ge([0], [], true);

  DESCRIPTION('GEQPOWR [1, 5, 18]>=[1, 5]');
  ge([1, 5, 18], [1, 5], true);

  DESCRIPTION('GEQPOWR [1, 5, 14, 21]>=[5, 14, 21]');
  ge([1, 5, 14, 21], [5, 14, 21], true);

  DESCRIPTION('LEQPOWR [1, 3, 7, 10]<=[1, 3, 7, 10]');
  le([1, 3, 7, 10], [1, 3, 7, 10], true);

  DESCRIPTION('LEQPOWR [1, 5, 12, 19, 34]<=[1, 5, 12, 19, 34]');
  le([1, 5, 12, 19, 34], [1, 5, 12, 19, 34], true);

  DESCRIPTION('LEQPOWR []<=[]');
  le([], [], true);

  DESCRIPTION('LEQPOWR [1, 5]<=[1, 5, 18]');
  le([1, 5], [1, 5, 18], true);

  DESCRIPTION('LEQPOWR []<=[1, 5]');
  le([], [1, 5], true);

  DESCRIPTION('LEQPOWR [1, 4, 7, 31, 37, 52]<=[1, 4, 7, 31, 37]');
  le([1, 4, 7, 31, 37, 52], [1, 4, 7, 31, 37], false);

  DESCRIPTION('LEQPOWR [0]<=[]');
  le([0], [], false);

  DESCRIPTION('LEQPOWR [1, 5, 18]<=[1, 5]');
  le([1, 5, 18], [1, 5], false);

  DESCRIPTION('LEQPOWR [0, 5, 14, 21]<=[5, 14, 21]');
  le([0, 5, 14, 21], [5, 14, 21], false);
END;

(************************************************************************)

PROCEDURE ADJSGSSRS;
VAR SHORTSET:SET OF 0..15;
    BOTH:RECORD CASE BOOLEAN OF
           TRUE:(MEDSET:SET OF 0..31);
           FALSE:(HISET, LOSET:INTEGER)
         END;
    LONGSET:RECORD CASE BOOLEAN OF
              TRUE:(BIG:SET OF 0..263);
              FALSE:(FILL:ARRAY[1..6] OF INTEGER;
                     INT10, INT9, INT8, INT7:INTEGER);
            END;
BEGIN
  CHK(INIT);

  BOTH.MEDSET:=[0, 4, 17, 28];
  DESCRIPTION('ADJ which does not change set size  <2word set>:=[0,4,17,28]');
  CHK((BOTH.LOSET=17) AND (BOTH.HISET=4098));

  BOTH.MEDSET:=[1, 5, 9];
  DESCRIPTION('ADJ which expands set    <2word set>:=[1, 5, 9]');
  CHK((BOTH.LOSET=546) AND (BOTH.HISET=0));

  BOTH.MEDSET:=[1, 5, 9, 21, 42];
  DESCRIPTION('ADJ which shrinks set    <2word set>:=[1, 5, 9, 21, 42]');
  CHK((BOTH.LOSET=546) AND (BOTH.HISET=32));

  LONGSET.BIG:=[131];
  DESCRIPTION('SGS  <10word set>:=[131]');
  CHK((LONGSET.INT9=8) AND (LONGSET.INT8=0));

  BOTH.MEDSET:=[4];
  DESCRIPTION('SGS  <2word set>:=[4]');
  CHK(BOTH.LOSET=16);

  LONGSET.BIG:=[126..131];
  DESCRIPTION('SRS which crosses word bndry   <10word set>:=[126..131]');
  CHK((LONGSET.INT8=-16384) AND (LONGSET.INT9=15));

  LONGSET.BIG:=[128..132];
  DESCRIPTION('SRS starting in lo bits of word <10word set>:=[128..132]');
  CHK((LONGSET.INT8=0) AND (LONGSET.INT9=31));

  LONGSET.BIG:=[139..143];
  DESCRIPTION('SRS up against hi bits of word <10word set>:=[139..143]');
  CHK((LONGSET.INT8=0) AND (LONGSET.INT9=-2048));

  LONGSET.BIG:=[125..150];
  DESCRIPTION('SRS which crosses a few words  <10word set>:=[125..150]');
  CHK((LONGSET.INT8=-8192) AND (LONGSET.INT9=-1) AND (LONGSET.INT10=127));

  LONGSET.BIG:=[135..135];
  DESCRIPTION('SRS one bit long <10word set>:=[135..135]');
  CHK((LONGSET.INT8=0) AND (LONGSET.INT9=128) AND (LONGSET.INT10=0));

  LONGSET.BIG:=[134..133];                {SRS which generates empty set}
  DESCRIPTION('SRS which makes empty set <10word set>:=[134..133]');
  CHK((LONGSET.INT8=0) AND (LONGSET.INT9=0) AND (LONGSET.INT10=0));
END;

(************************************************************************)

PROCEDURE INNUNI;
type set_t = set of 0..47;
VAR REGSET: set_t;
    empty: set_t;
    s01: set_t;

  procedure uni(a, b, expect: set_t);
  begin
    chk((a + b) = expect);
  end;

BEGIN
  CHK(INIT);

  REGSET:=[0, 7, 13, 15, 16];

  DESCRIPTION('INN  0 IN [0, 7, 13, 15, 16]');
  CHK(0 IN REGSET);

  DESCRIPTION('INN  7 IN [0, 7, 13, 15, 16]');
  CHK(7 IN REGSET);

  DESCRIPTION('INN 15 IN [0, 7, 13, 15, 16]');
  CHK(15 IN REGSET);

  DESCRIPTION('INN 16 IN [0, 7, 13, 15, 16]');
  CHK(16 IN REGSET);

  DESCRIPTION('INN  8 IN [0, 7, 13, 15, 16]');
  CHK(NOT(8 IN REGSET));

  DESCRIPTION('INN 32 IN [0, 7, 13, 15, 16]');
  CHK(NOT(32 IN REGSET));

  DESCRIPTION('INN 13 IN [0, 1]');
  CHK(NOT(13 IN [0, 1]));

  s01 := [0, 1];
  DESCRIPTION('INN 1 IN [0, 1]');
  CHK(1 IN s01);

  empty := [];
  DESCRIPTION('INN  0 IN []');
  CHK(NOT(0 IN empty));

  DESCRIPTION('INN 34 IN []');
  CHK(NOT(34 IN empty));

  DESCRIPTION('INN -1 IN []');
  CHK(NOT(-1 IN empty));

  s01 := [1, 5];
  DESCRIPTION('INN -1 IN [1, 5]');
  CHK(NOT(-1 IN s01));

  s01 := [30];
  DESCRIPTION('INN -1 IN [30]');
  CHK(NOT(-1 IN s01));

  s01 := [3];
  DESCRIPTION('INN 32000 IN [3]');
  CHK(NOT(32000 IN s01));

  DESCRIPTION('UNI [1, 4, 15]+[0, 1, 7]');
  uni([1, 4, 15], [0, 1, 7], [0, 1, 4, 7, 15]);

  DESCRIPTION('UNI [19, 23]+[0, 18]');
  uni([19, 23], [0, 18], [0, 19, 18, 23]);

  DESCRIPTION('UNI [1, 4, 19, 43]+[2, 5, 21]');
  uni([1, 4, 19, 43], [2, 5, 21], [1, 2, 4, 5, 19, 21, 43]);

  DESCRIPTION('UNI [2, 5, 21]+[1, 4, 19, 43]');
  uni([2, 5, 21], [1, 4, 19, 43], [1, 2, 4, 5, 19, 21, 43]);

  DESCRIPTION('UNI []+[1, 4, 5, 23]');
  uni([], [1, 4, 5, 23], [1, 4, 5, 23]);

  DESCRIPTION('UNI [18, 23, 25]+[]');
  uni([18, 23, 25], [], [18, 23, 25]);

  DESCRIPTION('UNI []+[]');
  uni([], [], []);
END;

(************************************************************************)

PROCEDURE DIFINT;
type set_t = set of 0..63;

  procedure dif(a, b, expect: set_t);
  begin
    chk((a - b) = expect);
  end;

  procedure int(a, b, expect: set_t);
  begin
    chk((a * b) = expect);
  end;

BEGIN
  CHK(INIT);

  DESCRIPTION('DIF [1, 3, 5, 7]-[3, 7]');
  dif([1, 3, 5, 7], [3, 7], [1, 5]);

  DESCRIPTION('DIF [1, 5, 17]-[1, 5]');
  dif([1, 5, 17], [1, 5], [17]);

  DESCRIPTION('DIF [1, 4, 19]-[19]');
  dif([1, 4, 19], [19], [1, 4]);

  DESCRIPTION('DIF [1, 38, 65]-[65]');
  dif([1, 38, 65], [65], [1, 38]);

  DESCRIPTION('DIF [1, 16, 19]-[43]');
  dif([1, 16, 19], [43], [1, 16, 19]);

  DESCRIPTION('DIF [5, 9, 23]-[2]');
  dif([5, 9, 23], [2], [5, 9, 23]);

  DESCRIPTION('DIF []-[1, 9]');
  dif([], [1, 9], []);

  DESCRIPTION('DIF []-[19, 35]');
  dif([], [19, 35], []);

  DESCRIPTION('DIF []-[]');
  dif([], [], []);

  DESCRIPTION('DIF [1, 34]-[]');
  dif([1, 34], [], [1, 34]);

  DESCRIPTION('INT [1, 3, 19]*[1, 3, 19]');
  int([1, 3, 19], [1, 3, 19], [1, 3, 19]);

  DESCRIPTION('INT [34, 35, 1, 4]*[34, 35]');
  int([34, 45, 1, 4], [34, 45], [34, 45]);

  DESCRIPTION('INT [1, 3, 6, 12]*[2, 3, 13]');
  int([1, 3, 6, 12], [2, 3, 13], [3]);

  DESCRIPTION('INT [1, 3, 12]*[2, 5]');
  int([1, 3, 12], [2, 5], []);

  DESCRIPTION('INT [4, 5]*[36, 37]');
  int([4, 5], [36, 37], []);

  DESCRIPTION('INT [36, 37]*[4, 5]');
  int([36, 37], [4, 5], []);

  DESCRIPTION('INT [1, 34]*[]');
  int([1, 34], [], []);

  DESCRIPTION('INT []*[23, 43]');
  int([], [23, 43], []);

  DESCRIPTION('INT []*[]');
  int([], [], []);
END;

(************************************************************************)

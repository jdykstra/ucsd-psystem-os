;
; UCSD PASCAL - Version II.0
; Copyright (C) 1978, 1979 Regents of the University of California
; All Rights Reserved
;
; Permission to use, copy, modify and distribute any part of UCSD
; PASCAL solely authored by UC authors before June 1, 1979 for
; educational, research and non-profit purposes, without fee, and
; without a written agreement is hereby granted, provided that the
; above copyright notice, this paragraph and the following three
; paragraphs appear in all copies.
;
; Those desiring to incorporate UCSD PASCAL into commercial products or
; use for commercial purposes should contact the Technology Transfer &
; Intellectual Property Services, University of California, San Diego,
; 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910,
; Ph: (858) 534-5815, Fax: (858) 534-7345, E-Mail: invent@ucsd.edu.
;
; IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
; FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES,
; INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF UCSD PASCAL, EVEN IF
; THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
; DAMAGE.
;
; THE SOFTWARE PROVIDED HEREIN IS ON AN "AS IS" BASIS, AND THE UNIVERSITY
; OF CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,
; UPDATES, ENHANCEMENTS, OR MODIFICATIONS. THE UNIVERSITY OF CALIFORNIA
; MAKES NO REPRESENTATIONS AND EXTENDS NO WARRANTIES OF ANY KIND,
; EITHER IMPLIED OR EXPRESS, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR
; THAT THE USE OF UCSD PASCAL WILL NOT INFRINGE ANY PATENT, TRADEMARK OR
; OTHER RIGHTS.
;
; Case Number: SD1991-807 (2006)
; http://invent.ucsd.edu/technology/cases/1995-prior/SD1991-807.shtml
;
;;; Source: http://bitsavers.org/bits/UCSD_Pascal/ucsd_II.0/
;;;     U121.2_LSI-11_P-CODE_SOURCE.raw.gz
;;; Description: Driver for REMEX floppies on TERAK 8510 systems.
;;; Date: 1979-02-06
        .TITLE  QX-11 FLOPPY HANDLER
        ; FOR VERSION I.5, II.0 INTERPS.
        ;
        ; COPYRIGHT (C) 1978 REGENTS OF THE UNIVERSTIY OF CALIFORNIA.
        ; PERMISSION TO COPY OR DISTRIBUTE THIS SOFTWARE OR DOCUMEN-
        ; TATION IN HARD COPY OR SOFT COPY GRANTED ONLY BY WRITTEN LICENSE
        ; OBTAINED FROM THE INSTITUTE OF INFORMATION SYSTEMS.  ALL RIGHTS
        ; RESERVED.  NO PART OF THIS PUBLICATION MAY BE REPRODUCED, STORED
        ; IN A RETRIEVAL SYSTEM ( E.G., IN MEMORY, DISK, OR CORE) OR BE
        ; TRANSMITTED BY ANY MEANS, ELECTRONIC, MECHANICAL, PHOTOCOPY,
        ; RECORDING, OR OTHERWISE, WITHOUT PRIOR WRITTEN PERMISSION FROM THE
        ; PUBLISHER.
        ;
        ;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                   ;
;                       SYSTEM TABLE CONTENTS                       ;
;                                                                   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        .ASECT          ; INTERRUPT HANDLER LOCATION IN VECTORS
.=250
        QX$INT          ; QX FLOPPY INTERRUPT HANDLER
        340             ; MAX PRIORITY

        .CSECT  TABLES
        .BLKW   128.    ; OPERATOR XFER TABLE
        .REPT   4
        .BLKW   3
        .ENDR
        .WORD   INBIT!OUTBIT,QXSTRT,QXABRT
        .WORD   INBIT!OUTBIT!400,QXSTRT,QXABRT
        .PAGE
        .CSECT  QXDRVR

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                   ;
;               Q X - 1 1   FLOPPY HANDLER                          ;
;                                                                   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

QXUNIT: .WORD   0       ; ADDRESS OF UNIT TABLE ENTRY FOR I/O
QXOFST  = 14

DUMCSW: .WORD           ; START OF PHONY IO Q ENTRY FOR TERAK DRIVER
        .WORD   DUMCSW  ; POINTER TO CSW
DUMIOQ: .WORD           ; DISK BLOCK #
        .WORD           ; SPEC FUNC (0) AND UNIT # IN HIGH BYTE
        .WORD           ; BUFFER ADDRESS
        .WORD           ; WORD COUNT
        .WORD   1       ; ASYNCHRONOUS IO REQUEST

QXSTRT: ; ENTER HERE TO START FLOPPY IO'S.   WE JUST SET UP A PHONY
        ; IO Q FOR THE RT-11 DRIVER FROM TERAK AND LET IT DO ALL THE
        ; DIRTY WORK.
        TST     QXUNIT  ; ANY IO'S ALREADY GOING?
        BNE     QXSTRT  ; IF SO THEN HANG!
        MOV     R1,QXUNIT       ; NOW IO IS GOING ON QX
        BIS     #BSYBIT,@R1
        TST     (R3)+           ; SKIP PAST IO TYPE
        MOV     R3,@SP          ; SAVE ALL REGISTERS...KLUDGE!!
        MOV     R0,-(SP)
        MOV     R1,-(SP)
        MOV     R2,-(SP)
        MOV     R4,-(SP)
        MOV     R5,-(SP)
        CLR     DUMCSW          ; CLEAR ANY HARD ERROR PROBS
        MOV     #DUMIOQ,R5      ; POINT R5 AT IO Q...READY TO BUILD IT
        MOV     <UBLOCK+QXOFST>(SP),(R5)+
        MOV     @R1,(R5)+       ; UNIT # (SPECIAL FORMAT IN MY UNITABLE)
        MOV     <UBUFFR+QXOFST>(SP),(R5)+
        MOV     <URLENG+QXOFST>(SP),R0
        ROR     R0              ; IN WORD COUNT (CBIT IS CLEAR)
        TST     -(R3)           ; CHECK IF READ OR WRITE
        BNE     1$              ; 1 IS A READ...0 IS A WRITE
        NEG     R0              ; NEGATIVE WORD COUNT IF A WRITE
1$:     MOV     R0,(R5)+        ; FINALLY WORD COUNT SET IN Q EL
        JSR     PC,QENTRY       ; AND START UP DRIVER
        MOV     (SP)+,R5        ; NOW RESTORE THOSE REGS
        MOV     (SP)+,R4
        MOV     (SP)+,R2
        MOV     (SP)+,R1
        MOV     (SP)+,R0
        MOVB    DUMCSW,@R1      ; SEND POSSIBLE ERROR BACK TO USER
        JMP     @(SP)+          ; RETURN TO UIO NOW (OLD R3 VAL @SP)

$INTEN: ; FAKE $INTEN FOR DRIVERS BENEFIT
        MOV     R4,-(SP)        ; R5 ALREADY ON STACK
        JSR     PC,@R5
        MOV     (SP)+,R4
        MOV     (SP)+,R5
        JMP     @#INTRTN

QXQUIT: ; THIS IS THE DUMMY QMANAGR ENTERED UPON IO COMPLETE
        MOVB    DUMCSW,@QXUNIT  ; PLACE POSSIBLE HARD ERROR IN RESULT BYTE
        BIC     #BSYBIT,@QXUNIT
        CLR     QXUNIT
        RTS     PC              ; FALLS INTO $INTEN
        .PAGE
;QX CONTROLLER REGISTERS
        QXCS = 177000
        QXDB = 177002
;COMMAND BITS
        QXENBL = 1
        QXRTC  = 2
        QXSTPN = 4
        QXSTPO = 6
        QXRTS  = 10
        QXREAD = 12
        QXWRT  = 14
        QXWRTD = 16
        QXHEAD = 20
        QXCRNT = 40
        QXNTRP = 100
        WRTFLG = 200
        QXTRK0 = 1000
        QXDDAT = 2000
        QXWRTP = 4000
        QXCRC  = 10000
        QXSYNC = 40000
QXCQE:  .WORD DUMIOQ            ;CURRENT QUEUE ELEMENT
QENTRY: MOV #QXCS, R5           ;SET UP CS REG POINTER
        MOV QXCQE, R1           ;GET CURRENT QUE ELEMENT POINTER
        MOV (R1)+, R3           ;R3 HAS BLOCK #
        INC  R1                 ;SKIP SPEC FUNCTION BYTE
        MOVB (R1)+, R4          ;GET UNIT NMBR
        BIC #^C7, R4            ;CLEAN OFF JOB NUMBER
        CMP R4, #3              ;0 THRU N ONLY
        BHI HERHOP              ;OTHERWISE...HARD ERROR
        CMPB R4, CMDMSK+1       ;IS THIS A DIFFERENT UNIT?
        BEQ BUFCMD              ;NO -> DON'T BOTHER W/TRK PNTR
        SWAB R4                 ;SET NEW UNIT NUMBER
        MOV R4, (R5)            ;INTO HARDWARE...DONE HERE
        SWAB R4                 ;IN CASE OF SPFUN 374
        MOVB R4, CMDMSK+1       ;INSTALL IN MASK
        ADD PC, R4              ;PIC POINTER TO
        ADD #TRKHST-., R4       ;TRACK HISTORY BYTES
        MOV R4, (PC)+           ;REF'D INDIRECTLY
TRACK:  .WORD 0                 ;THRU HERE
BUFCMD: MOV (R1)+, R4           ;R4 HAS BUFFER ADDRESS
        MOV #QXREAD!QXENBL, R0  ;ASSUME A READ COMMAND
        MOV (R1), R1            ;R1 HAS WORD COUNT
        BPL STNDRD              ;TAKE ABS VALUE
        MOV #WRTFLG!QXWRT!QXENBL, R0    ;NEG WRD CNT => WRITE
        ;WRTFLG IS A DON'T CARE BIT...MAKES READ/WRT CHK EASIER
        NEG R1                  ;TAKE ABSLUT VAL
STNDRD: ASL R3                  ;BLOCK NMBR * 4 =
        ASL R3                  ;LOGICAL SECTOR NMBR (LSN)
        MOV R3, LSNREQ          ;PUT LSN AT HELM
        JSR PC, ABCOMP          ;BEAT INTO ABSOLUTE TRK/SEC
        ASL R1                  ;WRDCNT -> BYTE COUNT
        ADD R4, R1              ;PLUS BUF START = BUFFER END
        MOV R1, BUFEND          ;AND THAT'S WHERE WE PUT IT!
        MOV R4, BUFADR          ;SAVE BUFFER POINTER
        MOV PC, R1              ;SET UP MARK
        ADD #QXTOP-.,R1         ;FOR INITL INTRPT
        MOV R1, MRKPTR
        MOV CMDMSK, R1          ;GET OLD MASK(HAS UNIT ALREADY)
        MOV #QXHEAD, R2         ;HEAD BIT MASK!
        BIS R2, R1              ;ASSUME HEAD DOWN
        BIS R1, R0              ;AND INSTALL TO DATA COMMAND
        MOV R0, CMD             ;SAVE NEW DATA COMMAND
        MOV R1, R0              ;NEED ANOTHER COPY
        ADD #QXNTRP!QXRTS!QXENBL, R0    ;NTRPT NBL OFF, RTS IN
        MOV R0, CMDTS           ;INSTALL TO TRKSEC COMMAND
        BIT R2, (R5)            ;WHERE IS REAL HEAD??(UNIT SAME)
        BNE 1$                  ;DOWN...GUESS WAS O.K.
        BIC R2,R1               ;TURN OFF HEAD BIT
1$:     MOV R1, CMDMSK          ;SAVE NEW MASK
        MOV R1, (R5)            ;KICK THE CONTROLLER
        RTS PC                  ;FOR FIRST INTERRUPT
        ;
HERHOP: CMP -(SP), -(SP)        ;LOAD STACK
HRDHOP: JMP HRDERR              ;WAY STATION FOR HARD ERRORS
TRKHST: .BYTE 200,200,200,200   ;NEG TRK HISTORY BYTE->NEW LOAD

QXTOP:  MOV CMDMSK, (R5)        ;CHECK THAT DOOR!!
        TST (R5)                ;AND THAT IT'S READY
        BMI HRDHOP              ; GIVE HARD ERROR FOR DRIVE NOT CLOSED
ERCOMP: CLR RESTEP              ;SET UP TRACK MISS CNTR
        MOV #8., (PC)+          ;RESET THE RETRY COUNTER
RTRIES: .WORD 0                 ;EACH TIME WE SEEK A NEW SECTOR
RESEEK: MOVB TRKREQ, R2         ;COMPUTE TRACK ERROR
        MOVB @TRACK, R3         ;BETWEEN HISTORY & REQUEST
        BPL 2$                  ;IS HISTORY BYTE VALID??
        MOVB R2, @TRACK         ;NO!...ASSUME HEAD POSITION
        MOV R2, R3              ;IS CORRECT TO CAUSE TRKSEC CHK
2$:     SUB R2, R3              ;SUBTRACT BYTES
        MOV R3, R2              ;NEED SIGNED AND UNSIGNED ERR
        BGE 1$                  ;ABSVAL INTO R
        NEG R2                  ;SIGNED IS IN R3
1$:     CMP R2, #4              ;AT 4 OR LESS STEPS,
        BHI HDUPCK              ;SET HEAD DOWN
        BIT #QXHEAD, (R5)       ;IS HEAD DOWN ALREADY??
        BNE ERRCHK
        BIS #QXHEAD, CMDMSK     ;SET HEAD DOWN BIT IN MSK
        MOV CMDMSK, (R5)        ;AND INTO CONTROLLER
        MOV #^D<50/2>, HDTIME   ;RST HD SETTLING TIME
ERRCHK: TST R2                  ;TRK ERR ZERO ???
        BEQ SETCHK              ;YES>>CHECK HEAD SETTLING
        BR MOVHD                ;NO>>MOVE IT!!!
        ;
HDUPCK: CMP R2, #10             ;IF OVER 8 STEPS REQD,
        BLOS MOVHD              ;WE CAN UNLOAD THE HEAD
        BIC #QXHEAD, CMDMSK     ;HEAD UP WITH NEXT STEP
MOVHD:  TST R3                  ;GET DIRECTIONS..IN OR OUT
        BPL MOVHDO
MOVHDN: JSR PC, STEPN
        BR MOVMRK
MOVHDO: JSR PC, STEPO
MOVMRK: MOV #^D<6/2>, R4        ;SET UP STEP WAIT TIME
        DEC R2                  ;WILL THIS BE LAST STEP?
        BGT 1$
        MOV #^D<26/2>, R4       ;UP TIMEOUT TO 26 MS
1$:     MOV R4, STPTIM          ;SAVE TIMEOUT FIGURE
        SUB R4, HDTIME          ;NUDGE TIMER
        JSR PC, MARK            ;FIRST CATCH STEP INTRPT
        JSR PC, TIME            ;WAIT FOR STEP/HEAD
STPTIM: .WORD 0
        BR RESEEK               ;RE FIGURE ERRORS
        ;
SETCHK: TST HDTIME              ;TIME-OUT REQUIRED??
        BLE HDSTOK              ;IF NEG, IT'S SETTLED
        JSR PC, TIME            ;SAVES SOME TIME WHEN TIMEOUT=0
HDTIME: .WORD 0
HDSTOK: CLR HDTIME              ;IN CASE OF ERRS!
        TSTB CMD                ;WRT OR WD FLAG ON??
        BPL TSREAD              ;NO>>XFR DATA AFTERWARDS
        ;
        ;WRITE DATA TRANSFER
        ;
WRTMOV: CMPB @TRACK, #53        ;DECIDE ON HEAD CURRENT
        BLOS 2$         ;IF ABOVE 43 (DECML)
        BIS #QXCRNT, CMD        ;SET LOW CURRENT BIT
        BR 1$
2$:     BIC #QXCRNT, CMD        ;CLR LOW CURRENT BIT
1$:     MOV (PC)+, R3           ;R3 INDEXES BUFFER
BUFADR: .WORD 0
        MOV #200, R2            ;64 WORDS
        ADD R3, R2              ;R2 -> END OF THIS CHUNK
        MOV BUFEND, R4          ;R4 -> END OF WHOLE BUFFER
        TST (R5)+       ;R5 PTS AT QXDB (ALSO RESET HDWR PTR)
DATAO:  CMP R3, R4              ;DOES R3 POINT ABOVE
        BHIS SLUFF              ;END OF BUFFER ??
        MOV (R3)+, (R5)         ;NO..MOV WRD TO QX BFR
WRTADV: CMP R2, R3              ;WAIT FOR 200
        BHI DATAO               ;LOOP DE LOOP
        TST -(R5)               ;RESTORE PTR TO QXCS
        BR TSREAD
SLUFF:  MOV #0, (R5)            ;YES..SLUFF ZEROS
        ;NOTE...A CLR DOES NOT WORK!! (CNTRLR IS FINICKY)
        TST (R3)+               ;ADV BUFFER
        BR WRTADV
        ;
TSWAIT: JSR PC, TIME            ;WAIT 4 MS OUT OF 6
        .WORD ^D<4/2>
TSREAD: MOV (PC)+, (R5)         ;READ TRACK/SECTOR ID
CMDTS:  .WORD 0                 ;RTS SANS NTRPT NBL
1$:     TSTB (R5)               ;WAIT ON DONE...STAGED!!
        BPL 1$                  ;SPIN WHEELS &...GREEN LIGHT
        ;WAIT ON DONE BECAUSE CAN'T ABIDE F/B NTRPT LATENCY
        MOV (R5)+, R4           ;ANY ERRORS???
        BPL UPDATE
        TST -(R5)               ;RESTORE CS PTR
        BIT #76000, R4          ;USE ONLY ONE COPY OF ERRS
        BEQ QXTOP               ;READY->DOOR OPENED->WAIT
        ;NOT-READY TOLERATED IF DURING READ I.D.
        JSR R5, RETRY           ;GET CLEARANCE FOR A RETRY
        BR TSWAIT               ;1ST 10 TRIES..RE-READ TS
        BIT #QXSYNC!QXTRK0, R4  ;10 TO 20 RETRIES...
        ;ANY ERR ON TRK 0->STEP IN
        ;NO SYNC ->MAYBE TRK 77->STEP OUT
        BNE ERRSTP              ;NO..THEN JOG HEAD
TSJOG:  JSR PC, STEP            ;STEP IN SAME DX AS LAST TIME
TSX:    JSR PC, MARK            ;WAIT ON STEP DONE
        JSR PC, TIME            ;BECAUSE DX OF STEP REVERSED
        .WORD ^D<26/2>          ;WAIT 26 MS
        BR TSREAD               ;AND RE-READ T/S
        ;
ERRSTP: BIT #QXTRK0, R4         ;TRK 0 ERROR??
        BNE 1$                  ;YS..STEPN / NO..STEPO
        JSR PC, STEPO           ;NO SYNC -> OUT OF TRK 77
        BR TSX                  ;USE COMMON MARK&TIME
1$:     JSR PC, STEPN           ;TRK0 -> STEP N
        BR TSX
        ;
UPDATE: CMP (R5), (PC)+         ;MATCH??
TRKREQ: .BYTE 0
SECREQ: .BYTE 0
        BEQ DATA                ;GOT IT!!
        MOV (R5), R4            ;GET ANOTHER COPY
        BPL UPDATX              ;DELETED TRACK??
        TST -(R5)               ;ADJ PTR
        BR TSJOG                ;DELTD TRK -> STEP OVER
UPDATX: TST -(R5)               ;ADJ PTR
        CMPB R4, TRKREQ         ;DID WE FIND RIGHT TRACK??
        BEQ TSWAIT              ;TRK O.K.->GO WAIT FOR SECTOR
        COM (PC)+               ;MIS-CALC'D TRACK!!
RESTEP: .WORD 0                 ;COUNT TRK  RECHECKS
        BMI TSWAIT              ;ALLOW ONE
        MOVB R4, @TRACK         ;UPDATE TRACK IMAGE
        JSR R5, RETRY           ;CLEAR FOR RETRY???
        NOP
        JMP RESEEK              ;UP TO 20 SHOTS FOR A DIME
        ;
DATA:   MOV (PC)+, -(R5)                ;ISSUE WHATEVER
CMD:    .WORD 0 ;ALREADY HAS UNIT,ENABLE,HEAD BITS (ALSO WRTFLG)
        INC LSNREQ              ;COMPUTE NEXT ABS SEC NMBR
        JSR PC, ABCOMP
        JSR PC, MARK            ;WAIT FOR COMPLETION
        MOV (R5), R4            ;ANY ERRORS?
        BPL READCK
        BIT #QXWRTP, R4         ;WRITE PROTECT VIOLATN?
        BNE HRDERR              ;YES..WRT CMD IS IMPLICIT
        BIT #QXDDAT, R4         ;DELETED DATA MARK??
        BEQ DATRTY              ;NO..GET SERIOUS THEN!!!
READCK: TSTB CMD                ;WAS THIS A READ COMMAND??
        BMI MOPUP               ;NO..SKIP DATA XFR
REDMOV: MOV (PC)+, R4           ;XFR 64 OR LESS WRDS
BUFEND: .WORD 0
        TST (R5)+       ;R5 -> DATA REG (ALSO RESET HDWR PNTR)
        MOV BUFADR, R3          ;DEPENDING ON WRD CNT
        MOV #100, R2            ;R2 & R4 COUNT XFR
2$:     CMP R3, R4              ;WORD CNT GETS FIRST SHOT
        BHIS 1$                 ;TO STOP XFR
        MOV (R5), (R3)+         ;MOVE A WORD
        SOB R2, 2$              ;OR 64 WORDS MAXIMUM
1$:     TST -(R5)
MOPUP:  ADD #200, BUFADR        ;ADV BFR PTR
        CMP BUFADR, BUFEND      ;JOB DONE???
        BHIS 2$                 ;YES...CHECK FOR WRITE SLUFF
1$:     JMP ERCOMP      ;GET ANOTHER SECTOR + RESET ERRORS
        ;
2$:     TSTB CMD                ;WAS THIS A WRITE/WRITE-D??
        BPL QXDONE              ;READ GETS TO GO HOME
        BIT #3, LSNREQ  ;WRITE MUST SLUFF TO END OF LOGICAL BLOCK
        BNE 1$          ;-> MULT OF 4 IN LOGICAL SECTOR
        BR QXDONE               ;SCHOOL'S OUT!!
        ;
DATRTY: DEC LSNREQ              ;ADJUST TO OLD LOGICAL SECTOR
        JSR PC, ABCOMP          ;CORRECT ABS T&S VALUES
        BIT #76000, R4          ;READY BIT ONLY??
        BNE DATRTZ
        BR HRDERR               ;DOOR OPENED DURING READ/WRITE
DATRTZ: JSR R5, RETRY           ;CLEAR FOR RETRY
        BR TSWAIT               ;RE-READ 10 TIMES, THEN
        BR TSJOG                ;JOG HEAD 10 TIMES
        ;
        ;TIME MARKER
        ;CALLED BY:     JSR PC, TIME
        ;               .WORD X
        ;X = TIME REQUEST IN 2 MS LUMPS
TIME:   MOV (SP)+, R4           ;POP STACK
        MOV (R4)+, TICKER       ;GET TIME + ADV RETURN
        MOV R4, TIMPTR          ;SAVE RETURN W/O STACK
TIMEX:  JSR PC, TICK            ;ASK FOR A TICK
        JSR PC, MARK            ;WAIT FOR 2 MS
        DEC (PC)+               ;BUMP COUNT
TICKER: .WORD 0
        BGT TIMEX               ;LOOP
        MOV (PC), PC            ;RETURN
TIMPTR: .WORD 0
        ;
RETRY:  DEC RTRIES              ;KNOCK RETRY COUNT
        BLE RETRY1              ;THRU 0 ADV RETURN
        RTS R5                  ;FIRST 10 RETURNS
RETRY1: CMP RTRIES, #-20.       ;OVER 20 YET??
        BLE RETRY2
        TST (R5)+               ;ADVANCE RETURN
        RTS R5                  ;IF TWIXT 10 & 20
RETRY2: MOV (SP)+, R5           ;REPAIR STACK, NO MORE TRYS
HRDERR: MOV QXCQE, R4           ;GET CHAN STAT WRD
        BIS #1, @-(R4)          ;SET HARD ERROR BIT
QXDONE: MOV CMDMSK, R4          ;GET CRNT UNIT & HEAD
        BIC #QXNTRP, R4         ;TURN OFF INTERRUPTS
        MOV R4, (R5)
        MOV (SP)+, R3           ;RESTORE REGS
        MOV (SP)+, R2
        JMP QXQUIT
        ;
MARK:   MOV (SP)+, MRKPTR       ;POP RETURN ADDRESS
        MOV (SP)+, R3           ;RESTORE REGS
        MOV (SP)+, R2
        RTS PC
        ;
QX$INT: JSR R5, $INTEN          ;ENTER SYSTEM STATE
        MOV R2, -(SP)           ;PUSH A FEW REGS
        MOV R3, -(SP)           ;
        MOV #QXCS, R5           ;ALWAYS SET UP QXCS PTR
        MOV (PC), PC            ;RETURN TO MARK CALLER
MRKPTR: .WORD 0
        ;
        ;
QXABRT: MOV     #QXDONE,MRKPTR  ; NEXT INTERRUPT KILLS IO
1$:     TST     QXUNIT          ; NOW HANG UNTIL IO IS DONE
        BNE     1$
        RTS     PC

STEPN:  MOV #105277, STEP       ;GET TRACK BUMPER
                                ;105277 = INCB @(PC)
        MOV #QXSTPN!QXENBL, STPINS      ;GET COMMAND
        BR STEP                 ;GO STEP
        ;
STEPO:  MOV #105377, STEP       ;GET TRACK BUMPER
                                ;105377 = DECB @(PC)
        MOV #QXSTPO!QXENBL, STPINS      ;FALL INTO STEP
        ;
STEP:   INCB @TRACK             ;MAY BE INCB OR DECB
        MOV (PC)+, R4           ;GET COMMAND
STPINS: .WORD QXSTPN!QXENBL     ;MAY BE QXSTPN OR QXSTPO
        BR CMDASY
        ;
        ;
TICK:   MOV #QXRTC!QXENBL, R4   ;2 MS TIME COMMAND
        ;
CMDASY: BIS (PC)+, R4           ;STUFF IN UNIT, INTRPT ENBL,
CMDMSK: .WORD QXNTRP!QXCRC  ;HEAD UP/DWN W/ INT ENABLED
        ;QXCRC-> UNIT CHANGE WHEN FIRST LOADED
        MOV R4, (R5)            ;STUFF CMD AT QX FLOPPY
        RTS PC                  ;R5 MUST => QXCS
        ;
        ;ABCOMP..........CONVERT LSNREQ TO ABSOLUTE
        ;SECREQ AND TRKREQ USING ONLY R2 & R3
        ;DEC 2:1 INTERLEAVE OF SECTORS IS SUPPORTED
        ;ALSO 6 SECTOR PER TRACK INCREMENT SKEW
        ;PLUS TRACK 0 CANNOT BE REACHED
        ;
ABCOMP: MOV (PC)+, R3           ;GET LSN REQUEST
LSNREQ: .WORD 0
        BMI ABCOM4              ;SIGN FLAGS SPFUN -> SKIP
        MOV #10, R2             ;COUNT 8 BITS OF DIVIDE
ABCOM1: CMP #6400, R3   ;DOES 26 GO INTO DIVIDEND
        BHI ABCOM2              ;BR IF NO, C CLR
        ADD #171400, R3         ;SUB 26 AND C SET
ABCOM2: ROL R3                  ;SHIFT IN QUOTIENT (C BIT)
        SOB R2, ABCOM1          ;COUNT 8 BITS
        MOVB R3, R2             ;COPY TRK NMBR TO R2
        CLRB R3
        SWAB R3         ;SIGN XTND SECTOR
        CMP #14, R3             ;C=1 IFF 13<R3<26
        ROL R3                  ;2:1 ,C SETS ODD/EVEN GROUP
        ASL R2                  ;ADD IN TRACK SKEW
        ADD R2, R3              ;ADD IN 6 X TRACK
        ADD R2, R3              ; (ALL X 2)
        ADD R2, R3
        ASR R2                  ;REPAIR TRACK NMBR
        INC R2                  ;SKIP TRACK 0
ABCOM3: SUB #32, R3             ;MODULO 26 THE SECTOR #
        BGE ABCOM3
        ADD #33, R3             ;ADJ TO 1 TO 26
        MOVB R3, SECREQ         ;PUT EM AWAY
        MOVB R2, TRKREQ
ABCOM4: RTS PC

(*
 * UCSD PASCAL - Version I.5
 * Copyright (C) 1978, 1979 Regents of the University of California
 * All Rights Reserved
 *
 * Permission to use, copy, modify and distribute any part of UCSD
 * PASCAL solely authored by UC authors before June 1, 1979 for
 * educational, research and non-profit purposes, without fee, and
 * without a written agreement is hereby granted, provided that the
 * above copyright notice, this paragraph and the following three
 * paragraphs appear in all copies.
 *
 * Those desiring to incorporate UCSD PASCAL into commercial products or
 * use for commercial purposes should contact the Technology Transfer &
 * Intellectual Property Services, University of California, San Diego,
 * 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910,
 * Ph: (858) 534-5815, Fax: (858) 534-7345, E-Mail: invent@ucsd.edu.
 *
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
 * FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES,
 * INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF UCSD PASCAL, EVEN IF
 * THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
 * THE SOFTWARE PROVIDED HEREIN IS ON AN "AS IS" BASIS, AND THE UNIVERSITY
 * OF CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,
 * UPDATES, ENHANCEMENTS, OR MODIFICATIONS. THE UNIVERSITY OF CALIFORNIA
 * MAKES NO REPRESENTATIONS AND EXTENDS NO WARRANTIES OF ANY KIND,
 * EITHER IMPLIED OR EXPRESS, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR
 * THAT THE USE OF UCSD PASCAL WILL NOT INFRINGE ANY PATENT, TRADEMARK OR
 * OTHER RIGHTS.
 *
 * Case Number: SD1991-807 (2006)
 * http://invent.ucsd.edu/technology/cases/1995-prior/SD1991-807.shtml
 *)

(*
 * Source: http://bitsavers.org/bits/UCSD_Pascal/ucsd_II.0/
 *     U123.1_Z80_ASSEM_SOURCE.raw.gz
 * Date: 1979-Mar-27
 *)

                        {start of ASM3}
        {Copyright (c) 1978 Regents of University of California}

SEGMENT PROCEDURE ASSEMBLE;
VAR   VIEWDUMMY:ARRAY[0..0] OF INTEGER;

PROCEDURE ZCOND;
VAR  I,CURRENT:INTEGER;
     DONE:BOOLEAN;
     ID:PACKNAME;

FUNCTION CONDTRUE:BOOLEAN;
VAR  ISEQUAL,CHECKEQUAL:BOOLEAN;
     INTSAVE:INTEGER;
     STRSAVE:STRING;
BEGIN
  LEX;
  IF LEXTOKEN=TSTRING THEN
    BEGIN
      STRSAVE:=STRVAL;
      LEX;
      CHECKEQUAL:=(LEXTOKEN=EQUAL);
      IF NOT CHECKEQUAL THEN
        IF LEXTOKEN<>NOTEQUAL THEN ERROR(62{'=' or '<>' expected});
      LEX;
      IF LEXTOKEN=TSTRING THEN
        BEGIN
          ISEQUAL:=(STRVAL=STRSAVE);
          CONDTRUE:=(CHECKEQUAL=ISEQUAL);
        END
      ELSE
        BEGIN
          ERROR(46{string expected});
          CONDTRUE:=TRUE;
        END;
      LEX;
    END
  ELSE
    BEGIN
      EXPRSSADVANCE:=FALSE;
      IF EXPRESS(TRUE) THEN
        IF RELOCATE.UNDEF THEN
          ERROR(1 {undefined label})
        ELSE
          BEGIN
            IF SPCIALSTKINDEX=-1 THEN
              CONDTRUE:=(RESULT.OFFSETORVALUE<>0)
            ELSE
              BEGIN
                INTSAVE:=RESULT.OFFSETORVALUE;
                CHECKEQUAL:=(SPECIALSTK[SPCIALSTKINDEX]=EQUAL);
                SPCIALSTKINDEX:=SPCIALSTKINDEX-1;
                IF EXPRESS(TRUE) THEN
                  BEGIN
                    ISEQUAL:=(RESULT.OFFSETORVALUE=INTSAVE);
                    CONDTRUE:=(CHECKEQUAL=ISEQUAL);
                  END
                ELSE CONDTRUE:=TRUE;
              END
          END
      ELSE CONDTRUE:=TRUE;
    END;
END;

BEGIN
  CONDINDEX:=CONDINDEX + 1;
  CURRENT:=CONDINDEX;
  IF NOT CONDTRUE THEN
    BEGIN
      IF LEXTOKEN<>ENDLINE THEN
        BEGIN
          ERROR(5{Extra garbage on line});
          WHILE LEXTOKEN<>ENDLINE DO LEX;
        END;
      PRINTLINE;  DONE:=FALSE;
      REPEAT
        GETCHAR;
        IF TEXTINDEX>101 THEN ERROR(6{input line over 80 chars});
        IF CH=CHR(13) THEN
          BEGIN
            TEXTLINE:=BLANKLINE;
            TEXTINDEX:=-1;
            SCANLINE;
          END
        ELSE IF CH='.' THEN
          BEGIN
            ID:='        ';  I:=0;   GETCHAR;
            WHILE (CH IN ['A'..'Z','0'..'9']) AND (I<SIZEOF(ID)) DO
              BEGIN
                ID[I]:=CH;
                I:=I+1;
                GETCHAR;
              END;
            ADVANCE:=FALSE;
            IF ID='IF      ' THEN
              CONDINDEX:=CONDINDEX + 1
            ELSE IF ID='ENDC    ' THEN
              IF CONDINDEX<0 THEN
                BEGIN
                  ERROR(7{Not enough ifs});
                  EXIT(ZCOND);
                END
              ELSE CONDINDEX:=CONDINDEX - 1;
            DONE:=((CURRENT=CONDINDEX) AND (ID='ELSE    ')) OR
                  ((CURRENT=CONDINDEX + 1) AND (ID='ENDC    '));
          END;
      UNTIL DONE;
      LEXTOKEN:=TNULL; {Different from ENDLINE}
      LEX;
    END;
END;

PROCEDURE ZELSE;
VAR  I,CURRENT:INTEGER;
     DONE:BOOLEAN;
     ID:PACKNAME;
BEGIN
  CURRENT:=CONDINDEX;
  PRINTLINE;  DONE:=FALSE;
  REPEAT
    GETCHAR;
    IF TEXTINDEX>101 THEN ERROR(6{input line over 80 chars});
    IF CH=CHR(13) THEN
      BEGIN
        TEXTLINE:=BLANKLINE;
        TEXTINDEX:=-1;
        SCANLINE;
      END
    ELSE IF CH='.' THEN
      BEGIN
        I:=0;  ID:='        ';  GETCHAR;
        WHILE (CH IN ['A'..'Z','0'..'9']) AND (I<SIZEOF(ID)) DO
          BEGIN
            ID[I]:=CH;
            I:=I+1;
            GETCHAR;
          END;
        ADVANCE:=FALSE;
        IF ID='IF      ' THEN
          CONDINDEX:=CONDINDEX + 1
        ELSE IF ID='ENDC    ' THEN
          IF CONDINDEX<0 THEN
            BEGIN
              ERROR(7{Not enough ifs});
              EXIT(ZELSE);
            END
          ELSE CONDINDEX:=CONDINDEX - 1;
        DONE:=(CURRENT=CONDINDEX + 1) AND (ID='ENDC    ');
      END;
  UNTIL DONE;
  LEX;
END;

PROCEDURE COREFIX(ENTRY:BKLABELPTR; ADDVALUE:INTEGER);
VAR   BUFINDEX:INTEGER;
      NEXTENTRY:BKLABELPTR;
      PRINTLC:WORDSWAP;
BEGIN
  WHILE ENTRY<>NIL DO
    BEGIN
      NEXTENTRY:=ENTRY^.NEXT;
      BUFINDEX:=ENTRY^.OFFSET-BUFBOTTOM;
      ENTRY^.VALUE:=ENTRY^.VALUE + ADDVALUE;
      IF (NOT WORDADDRESSED) AND (ENTRY^.WORDLC) THEN
        ENTRY^.VALUE:=ENTRY^.VALUE DIV 2;
      IF (BUFINDEX>=0) AND (BUFINDEX<BUFLIMIT) THEN
        PATCHCODE(ENTRY^,BUFINDEX)
      ELSE
        BEGIN
          SCRATCH^.CLASS:=0;  {store it away for PROCEND}
          SCRATCH^.FWDREF:=ENTRY^;
          PUT(SCRATCH);
          SCRATCHEND:=SCRATCHEND + 1;
        END;
      ENTRY^.NEXT:=FREELABEL;
      FREELABEL:=ENTRY;
      ENTRY:=NEXTENTRY;
    END;
END;

PROCEDURE ZLABEL;
VAR   SWAP:INTEGER;
      NEXTENTRY,ENTRY:BKLABELPTR;
BEGIN
  ENTRY:=NIL; {Set up nil pointer for error exit}
  IF LEXTOKEN=TLABEL THEN
    BEGIN
      ENTRY:=SYM^.FWDREF;
      SYMLAST:=TRUE;
      LASTSYM:=SYM;
      SYM^.OFFSETORVALUE:=LC;
      IF (CODESECTION=A) AND (ENTRY<>NIL) THEN
        ERROR(8{must be declared in ASECT before used});
      IF SYM^.ATTRIBUTE=DEFUNKNOWN THEN
        SYM^.ATTRIBUTE:=DEFS
      ELSE IF SYM^.ATTRIBUTE=UNKNOWN THEN
        BEGIN
          IF CODESECTION=A THEN
            BEGIN
              SYM^.ATTRIBUTE:=ABS;
              SYM^.OFFSETORVALUE:=ALC;
            END
          ELSE SYM^.ATTRIBUTE:=LABELS;
        END
      ELSE
        BEGIN
          ERROR(9{identifier previously declared});
          SYMLAST:=FALSE;  ENTRY:=NIL;
        END;
    END
  ELSE
    BEGIN  {Processing a local label}
      SYMLAST:=FALSE;
      IF CODESECTION=A THEN
        ERROR(44{no local labels in ASECT})
      ELSE IF TEMP[TEMPLABEL].TEMPATRIB<>UNKNOWN THEN
        ERROR(9{identifier previously declared})
      ELSE
        BEGIN
          TEMP[TEMPLABEL].TEMPATRIB:=LABELS;
          TEMP[TEMPLABEL].DEFOFFSET:=LC;
          ENTRY:=TEMP[TEMPLABEL].FWDREF;
          TEMP[TEMPLABEL].FWDREF:=NIL;
        END;
    END;
  IF LEXTOKEN=TLABEL THEN LLCHECK;
  LEX;
  IF LEXTOKEN<>EQU THEN COREFIX(ENTRY,LC);
END;

PROCEDURE ZALIGN;
{Align handles the .Align psuedo-op. The operand represents the
 boundary multiple on which the next desired code is to start.}
VAR OFFSET,I:INTEGER;
BEGIN
  IF EXPRESS(TRUE) THEN
    IF CHECKOPERAND(TRUE,TRUE,TRUE,0,32767) THEN
      BEGIN
        IF RESULT.OFFSETORVALUE>0 THEN OFFSET:=LC MOD RESULT.OFFSETORVALUE
          ELSE OFFSET:=0;
        IF OFFSET>0 THEN
          BEGIN
            OFFSET:=RESULT.OFFSETORVALUE - OFFSET;
            IF WORDADDRESSED THEN
              FOR I:=1 TO OFFSET DO PUTWORD(0)
            ELSE
              FOR I:=1 TO OFFSET DO PUTBYTE(0);
          END;
      END;
END;

PROCEDURE ZASCII;
VAR STRINGSIZE,COUNT:INTEGER;
BEGIN
  LEX;
  IF LEXTOKEN=TSTRING THEN
    BEGIN
      STRINGSIZE:=LENGTH(STRVAL);
      FOR COUNT:=1 TO STRINGSIZE DO
        BEGIN
          IF DISPLAY THEN
            IF (COUNT MOD BYTEFIT=1) AND (COUNT<>1) THEN
              BEGIN
                PRINTLINE;
                TEXTLINE:=BLANKLINE;
              END;
          PUTBYTE(ORD(STRVAL[COUNT]));
        END;
      IF WORDADDRESSED THEN
        BEGIN
          LC:=((STRINGSIZE+1) DIV 2) + LC;
          IF ODD(STRINGSIZE) THEN PUTBYTE(0);
        END;
    END
  ELSE
    ERROR(10{improper format});
  LEX;
END;

PROCEDURE ZEQU;
VAR   NUM:WORDSWAP;
BEGIN
  IF NOT SYMLAST THEN
    ERROR(9{identifier previously declared})
  ELSE
    IF EXPRESS(TRUE) THEN
      BEGIN
        IF RELOCATE.UNDEF THEN
          ERROR(63 {may not EQU to undefined labels})
        ELSE IF LASTSYM^.ATTRIBUTE<>DEFS THEN
          BEGIN
            IF CODESECTION=A THEN
              LASTSYM^.ATTRIBUTE:=ABS
            ELSE IF LASTSYM^.ATTRIBUTE IN
              [ABS,LABELS,DEFABS,DEFCC,DEFIR,DEFREG,DEFRP] THEN
                LASTSYM^.ATTRIBUTE:=RESULT.ATTRIBUTE
            ELSE ERROR(21 {Variable not PC relative});
          END;
        LASTSYM^.OFFSETORVALUE:=RESULT.OFFSETORVALUE;
        NUM.HWORD:=RESULT.OFFSETORVALUE;
        SENDWORD(NUM,0,TRUE);
        IF LASTSYM^.FWDREF<>NIL THEN
          IF (LASTSYM^.ATTRIBUTE=LABELS) OR (LASTSYM^.ATTRIBUTE=DEFS) THEN
            COREFIX(LASTSYM^.FWDREF,LASTSYM^.OFFSETORVALUE)
          ELSE
            ERROR(12{must EQU before use if not a label});
      END;
  SYMLAST:=FALSE;
END;

PROCEDURE ZDEFMACRO;
VAR  I:INTEGER;
     ID:PACKNAME;
BEGIN
  CURRENTATRIB:=MACROS;
  IF SOURCE<>FILESOURCE THEN
    ERROR(61{nested Macro definitions are senseless})
  ELSE
    BEGIN
      LEX;
      IF NOT (LEXTOKEN IN [INSTR,TIDENTIFIER]) THEN
         ERROR(13{macro identifier expected});
      SYM^.ATTRIBUTE:=MACROS;   {resets if old INSTR}
      NEW(MCPTR); SYM^.MACRO:=MCPTR;       {puts macro on heap}
      REPEAT GETCHAR; UNTIL CH=CHR(13);
      ADVANCE:=FALSE;
      MCPTR^[0]:=CHR(ORD(MACROLIST)); MACROINDEX:=1;
      I:=0;  ID:='        ';
      DEFMCHOOK:=TRUE;
      REPEAT
        IF MACROINDEX>MACROSIZE THEN
          BEGIN
            NEW(MCPTR);
            MACROINDEX:=0;
          END;
        GETCHAR;
        IF TEXTINDEX>101 THEN ERROR(6{input line over 80 chars});
        MCPTR^[MACROINDEX]:=CH;
        IF CH=CHR(13) THEN
          BEGIN
            PRINTLINE;
            SCANLINE;
          END
        ELSE IF CH='.' THEN
          BEGIN
            I:=0;
            ID:='        ';
          END
        ELSE IF I<5 THEN
          BEGIN
            ID[I]:=CH;
            I:=I + 1;
          END;
        MACROINDEX:=MACROINDEX + 1;
      UNTIL ID='ENDM    ';
      IF MACROINDEX<=MACROSIZE THEN MCPTR^[MACROINDEX]:=CHR(13)
        ELSE
          BEGIN
            NEW(MCPTR);
            MCPTR^[0]:=CHR(13);
          END;
      CURRENTATRIB:=UNKNOWN;
      DEFMCHOOK:=FALSE;
    END;
  LEX;
END;

PROCEDURE ZBLOCK;
VAR  COUNT,SIZE:INTEGER;
     INITVALUE:WORDSWAP;
{handles the .BLOCK psuedo-op, the operand is the number
 of bytes/words of storage requested.}
BEGIN
  IF EXPRESS(TRUE) THEN
    IF CHECKOPERAND(TRUE,TRUE,TRUE,0,BUFLIMIT) THEN
      IF CODESECTION=A THEN
        BEGIN
          ALC:=ALC + RESULT.OFFSETORVALUE;
          LEX;
        END
      ELSE
        BEGIN
          SIZE:=RESULT.OFFSETORVALUE;
          INITVALUE.HWORD:=0;
          IF LEXTOKEN=COMMA THEN
            IF EXPRESS(FALSE) THEN
              IF CHECKOPERAND(TRUE,TRUE,TRUE,-128,255) THEN
                INITVALUE.HWORD:=RESULT.OFFSETORVALUE;
          IF WORDADDRESSED THEN
            FOR COUNT:=1 TO SIZE DO PUTWORD(INITVALUE.HWORD)
          ELSE
            FOR COUNT:=1 TO SIZE DO PUTBYTE(INITVALUE.LOWBYTE);
        END;
END;

PROCEDURE ZWORD;
VAR  COUNT,INITVALUE:INTEGER;
BEGIN
  INITVALUE:=0;
  COUNT:=0;
  IF CODESECTION=A THEN
    BEGIN
      IF WORDADDRESSED THEN ALC:=ALC+1 ELSE ALC:=ALC+2;
      LEX;
    END
  ELSE
    REPEAT
      IF EXPRESS(FALSE) THEN
        IF CHECKOPERAND(TRUE,FALSE,FALSE,0,0) THEN
          INITVALUE:=RESULT.OFFSETORVALUE;
      PUTWORD(INITVALUE);
      IF DISPLAY THEN
        BEGIN
          COUNT:=COUNT + 1;
          IF (COUNT MOD WORDFIT=0) AND (LEXTOKEN=COMMA) THEN PRINTLINE;
        END;
    UNTIL LEXTOKEN<>COMMA;
END;

PROCEDURE ZBYTE;
VAR  INITVALUE:WORDSWAP;
     COUNT:INTEGER;
BEGIN
  IF WORDADDRESSED THEN
    ERROR(14{word addressed only})
  ELSE IF CODESECTION=A THEN
    BEGIN
      ALC:=ALC+1;
      LEX;
    END
  ELSE
    BEGIN
      COUNT:=0;
      REPEAT
        INITVALUE.HWORD:=0;
        IF EXPRESS(FALSE) THEN
          IF CHECKOPERAND(TRUE,TRUE,TRUE,-128,255) THEN
            INITVALUE.HWORD:=RESULT.OFFSETORVALUE;
        PUTBYTE(INITVALUE.LOWBYTE);
        IF DISPLAY THEN
          BEGIN
            COUNT:=COUNT + 1;
            IF (COUNT MOD BYTEFIT=0) AND (LEXTOKEN=COMMA) THEN PRINTLINE;
          END;
      UNTIL LEXTOKEN<>COMMA;
    END;
END;

PROCEDURE ZORG;
VAR  I,DIFFERENCE:INTEGER;
BEGIN
  IF EXPRESS(TRUE) THEN
    IF CHECKOPERAND(TRUE,TRUE,FALSE,0,32767) THEN
      IF CODESECTION=A THEN
        ALC:=RESULT.OFFSETORVALUE
      ELSE
        BEGIN
          IF (LC=0) AND NOT JUMPINFO THEN
            BEGIN
              LC:=RESULT.OFFSETORVALUE;
              LOWLC:=LC;
            END
          ELSE IF RESULT.OFFSETORVALUE<LC THEN
            ERROR(15{backward ORG not allowed})
          ELSE
            BEGIN
              DIFFERENCE:=RESULT.OFFSETORVALUE - LC;
              IF WORDADDRESSED THEN
                BEGIN
                  LC:=LC + DIFFERENCE;
                  DIFFERENCE:=DIFFERENCE + DIFFERENCE;
                END;
              FOR I:=1 TO DIFFERENCE DO PUTBYTE(0);
            END;
        END;
END;

PROCEDURE ZGLOBAL;
{Privates are not put into the linker information.}
VAR SAVESYM:SYMTABLEPTR;
BEGIN
  CASE LEXTOKEN OF
    TCONST:CURRENTATRIB:=CONSTS;
    PUBLIC:CURRENTATRIB:=PUBLICS;
    PRIVATE:CURRENTATRIB:=PRIVATES;
    REF:CURRENTATRIB:=REFS;
    DEF:CURRENTATRIB:=DEFUNKNOWN
  END;
  REPEAT
    LEX;
    IF LEXTOKEN<>TIDENTIFIER THEN
      ERROR(16{Expected identifier})
    ELSE
      BEGIN
        IF SYM^.ATTRIBUTE<>CURRENTATRIB THEN
          ERROR(9{Identifier previously declared})
        ELSE IF CURRENTATRIB=PRIVATES THEN
          BEGIN
            SAVESYM:=SYM;
            LEX;
            IF LEXTOKEN=COLON THEN
              BEGIN
                LEX;
                IF LEXTOKEN=CONSTANT THEN
                  SAVESYM^.NWORDS:=CONSTVAL
                ELSE ERROR(17{Constant expected});
                LEX;
              END
            ELSE SAVESYM^.NWORDS:=1;
          END
        ELSE LEX;
      END;
  UNTIL LEXTOKEN<>COMMA;
  CURRENTATRIB:=UNKNOWN;
END;

PROCEDURE ZTITLE;
BEGIN
  LEX;
  IF LEXTOKEN=TSTRING THEN TITLELINE:=STRVAL
    ELSE ERROR(46{string expected});
  LEX;
END;

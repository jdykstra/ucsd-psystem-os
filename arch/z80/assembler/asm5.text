(*
 * UCSD PASCAL - Version I.5
 * Copyright (C) 1978, 1979 Regents of the University of California
 * All Rights Reserved
 *
 * Permission to use, copy, modify and distribute any part of UCSD
 * PASCAL solely authored by UC authors before June 1, 1979 for
 * educational, research and non-profit purposes, without fee, and
 * without a written agreement is hereby granted, provided that the
 * above copyright notice, this paragraph and the following three
 * paragraphs appear in all copies.
 *
 * Those desiring to incorporate UCSD PASCAL into commercial products or
 * use for commercial purposes should contact the Technology Transfer &
 * Intellectual Property Services, University of California, San Diego,
 * 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910,
 * Ph: (858) 534-5815, Fax: (858) 534-7345, E-Mail: invent@ucsd.edu.
 *
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
 * FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES,
 * INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF UCSD PASCAL, EVEN IF
 * THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
 * THE SOFTWARE PROVIDED HEREIN IS ON AN "AS IS" BASIS, AND THE UNIVERSITY
 * OF CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,
 * UPDATES, ENHANCEMENTS, OR MODIFICATIONS. THE UNIVERSITY OF CALIFORNIA
 * MAKES NO REPRESENTATIONS AND EXTENDS NO WARRANTIES OF ANY KIND,
 * EITHER IMPLIED OR EXPRESS, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR
 * THAT THE USE OF UCSD PASCAL WILL NOT INFRINGE ANY PATENT, TRADEMARK OR
 * OTHER RIGHTS.
 *
 * Case Number: SD1991-807 (2006)
 * http://invent.ucsd.edu/technology/cases/1995-prior/SD1991-807.shtml
 *)

(*
 * Source: http://bitsavers.org/bits/UCSD_Pascal/ucsd_II.0/
 *     U123.1_Z80_ASSEM_SOURCE.raw.gz
 * Date: 1979-Mar-27
 *)

                        {starting ASM5}
        {Copyright (c) 1978 Regents of University of California}

PROCEDURE NEWFILE;
BEGIN
  (*$I-*)
  TEXTLINE:=BLANKLINE; TEXTINDEX:=0;
  IF ALTINPUT THEN
    BNUM:=BLOCKREAD(ALTFILE,XBLOCK,2,BLOCKNO)
  ELSE
    BNUM:=BLOCKREAD(USERINFO.WORKSRC^,XBLOCK,2,BLOCKNO);
  BLOCKPTR:=0;
  BLOCKNO:=BLOCKNO+BNUM;
  IF DEBUG THEN
     WRITELN('BLOCKREAD=',BLOCKNO);
  IF BNUM=0 THEN
    IF ALTINPUT THEN
      BEGIN
        BLOCKNO:=ALTBLOCNO;
        BLOCKPTR:=ALTBLOCPTR;
        BNUM:=BLOCKREAD(USERINFO.WORKSRC^,XBLOCK,2,BLOCKNO - 2);
        ALTINPUT:=FALSE;
        CLOSE(ALTFILE);
        CURFNAME:=FIRSTFNAME;
      END
    ELSE
      BEGIN
        ERROR(36);  {unexpected end of input}
        UNITCLEAR(3);
        EXIT(TLA);
      END;
  IOCHECK(TRUE);
  TEXTINDEX:=SCAN(102,=CHR(13),XBLOCK[BLOCKPTR]);
  ENDOFPAGE:=SCAN(1024,=CHR(0),XBLOCK);
  IF TEXTINDEX<102 THEN
    MOVELEFT(XBLOCK[BLOCKPTR],TEXTLINE,TEXTINDEX)
  ELSE
    MOVELEFT(XBLOCK[BLOCKPTR],TEXTLINE,102);
  (*$I+*)
END;

PROCEDURE GETCHAR;
VAR I:INTEGER;

PROCEDURE PARMSETUP(VAR INDEX:INTEGER);
VAR  I,NEWINDEX:INTEGER;
BEGIN
  CH:=MCPTR^[INDEX + 1];
  INDEX:=INDEX + 2;
  IF (CH<'1') OR (CH>'9') THEN
    ERROR(22{illegal macro parameter index})
  ELSE
    BEGIN
      I:=ORD(CH)-ORD('1');
      NEWINDEX:=MCINDEX[MCSTKINDEX-1];
      IF MCSTKINDEX>1 THEN
        BEGIN
          MCPTR:=MACROSTACK[MCSTKINDEX - 1];
          WHILE (I<>0) AND (MCPTR^[NEWINDEX]<>CHR(13)) DO
            BEGIN
              IF MCPTR^[NEWINDEX]=',' THEN I:=I-1;
              NEWINDEX:=NEWINDEX + 1;
            END;
          I:=SCAN(102,<>' ',MCPTR^[NEWINDEX]);
          NEWINDEX:=NEWINDEX + I;
          CH:=MCPTR^[NEWINDEX];
          IF (CH=CHR(13)) OR (CH=';') THEN
            MCPTR:=MACROSTACK[MCSTKINDEX];
        END
      ELSE
        BEGIN
          WHILE (I<>0) AND (XBLOCK[NEWINDEX]<>CHR(13)) DO
            BEGIN
              IF XBLOCK[NEWINDEX]=',' THEN I:=I-1;
              NEWINDEX:=NEWINDEX + 1;
            END;
          I:=SCAN(102,<>' ',XBLOCK[NEWINDEX]);
          NEWINDEX:=NEWINDEX + I;
          CH:=XBLOCK[NEWINDEX];
        END;
     IF (CH<>CHR(13)) AND (CH<>';') THEN
       BEGIN
         SOURCE:=PARMSOURCE;
         PARMSTACK[MCSTKINDEX]:=INDEX;
         MCSTKINDEX:=MCSTKINDEX-1;
         PARMPTR:=NEWINDEX;
       END;
      ADVANCE:=FALSE;
      GETCHAR;
    END;
END;

BEGIN
  IF DEBUG THEN WRITE(LISTFILE,'Getchar ');
  CASE SOURCE OF
    MACROSOURCE:BEGIN
                  IF ADVANCE THEN
                    BEGIN
                      MACROINDEX:=MACROINDEX + 1;
                      TEXTINDEX:=TEXTINDEX + 1;
                    END
                  ELSE ADVANCE:=TRUE;
                  IF MCPTR^[MACROINDEX]=CHR(16) THEN
                    BEGIN
                      CH:=MCPTR^[MACROINDEX + 1];
                      STARTLINE:=(ORD(CH) - 32=0);
                      IF TEXTINDEX<101 THEN
                        BEGIN
                          TEXTLINE[TEXTINDEX]:=CHR(16);
                          TEXTLINE[TEXTINDEX + 1]:=CH;
                          TEXTINDEX:=TEXTINDEX+2;
                        END;
                      MACROINDEX:=MACROINDEX + 2;
                    END;
                  CH:=MCPTR^[MACROINDEX];
                  IF CH='%' THEN
                    BEGIN
                      SAVEMSX:=MCSTKINDEX;
                      PARMSETUP(MACROINDEX);
                    END
                  ELSE IF (CH=' ') AND NOTSTRING THEN
                    BEGIN
                      I:=SCAN(102,<>' ',MCPTR^[MACROINDEX]);
                      IF TEXTINDEX + I<102 THEN
                        BEGIN
                          FILLCHAR(TEXTLINE[TEXTINDEX],I,' ');
                          TEXTINDEX:=TEXTINDEX + I - 1;
                        END;
                      MACROINDEX:=MACROINDEX + I - 1;
                    END
                  ELSE IF (CH<>CHR(13)) THEN
                    BEGIN
                      IF TEXTINDEX<102 THEN TEXTLINE[TEXTINDEX]:=CH;
                      IF CH=CHR(9) THEN CH:=' '; {tab}
                    END;
                END;
     PARMSOURCE:BEGIN
                  IF ADVANCE THEN
                    BEGIN
                      PARMPTR:=PARMPTR + 1;
                      TEXTINDEX:=TEXTINDEX + 1;
                    END
                  ELSE ADVANCE:=TRUE;
                  IF MCSTKINDEX>0 THEN CH:=MCPTR^[PARMPTR]
                    ELSE CH:=XBLOCK[PARMPTR];
                  IF (CH='%') AND (MCSTKINDEX>0) THEN
                    PARMSETUP(PARMPTR)
                  ELSE IF (CH=',') OR (CH=CHR(13)) OR (CH=';') THEN
                    BEGIN
                      MCSTKINDEX:=MCSTKINDEX+1;
                      IF MCSTKINDEX>1 THEN
                        I:=SCAN(-70,<>' ',MCPTR^[PARMPTR - 1])
                      ELSE
                        I:=SCAN(-70,<>' ',XBLOCK[PARMPTR - 1]);
                      TEXTINDEX:=TEXTINDEX + I;
                      MCPTR:=MACROSTACK[MCSTKINDEX];
                      IF MCSTKINDEX=SAVEMSX THEN SOURCE:=MACROSOURCE
                        ELSE PARMPTR:=PARMSTACK[MCSTKINDEX];
                      ADVANCE:=FALSE;
                      GETCHAR;
                    END
                  ELSE IF (CH=' ') AND NOTSTRING THEN
                    BEGIN
                      REPEAT
                        IF TEXTINDEX<102 THEN TEXTLINE[TEXTINDEX]:=' ';
                        TEXTINDEX:=TEXTINDEX + 1;
                        PARMPTR:=PARMPTR + 1;
                        IF MCSTKINDEX>0 THEN CH:=MCPTR^[PARMPTR]
                          ELSE CH:=XBLOCK[PARMPTR];
                      UNTIL CH<>' ';
                      CH:=' ';
                      PARMPTR:=PARMPTR - 1;
                      TEXTINDEX:=TEXTINDEX - 1;
                    END
                  ELSE
                    BEGIN
                      IF TEXTINDEX<102 THEN TEXTLINE[TEXTINDEX]:=CH;
                      IF CH=CHR(9) THEN CH:=' '; {tab}
                    END;
                END;
     FILESOURCE:BEGIN
                  IF ADVANCE THEN BLOCKPTR:=BLOCKPTR + 1
                    ELSE ADVANCE:=TRUE;
                  IF BLOCKPTR>=ENDOFPAGE THEN NEWFILE;
                  IF (XBLOCK[BLOCKPTR]=CHR(16)) AND NOT DEFMCHOOK THEN
                    BEGIN
                      CH:=XBLOCK[BLOCKPTR+1];
                      STARTLINE:=(ORD(CH) - 32=0);
                      BLOCKPTR:=BLOCKPTR+2;
                    END;
                  CH:=XBLOCK[BLOCKPTR];
                  IF CH=';' THEN
                    BEGIN
                      I:=SCAN(102,=CHR(13),XBLOCK[BLOCKPTR]);
                      BLOCKPTR:=BLOCKPTR + I;
                      CH:=CHR(13);
                    END
                  ELSE IF (CH=' ') AND NOTSTRING AND NOT DEFMCHOOK THEN
                    BEGIN
                      I:=SCAN(102,<>' ',XBLOCK[BLOCKPTR]);
                      BLOCKPTR:=BLOCKPTR + I - 1;
                    END
                  ELSE IF CH<>CHR(13) THEN
                    BEGIN
                      IF CH=CHR(9) THEN CH:=' '; {tab}
                    END;
                END
     END;{CASE}
  IF DEBUG THEN WRITELN(LISTFILE,'CH=',CH,'|ORD:',ORD(CH),
       ' FROM:',ORD(SOURCE));
END;

FUNCTION CHECKOPERAND; {CKSPSTK,CKABS,CKRANGE:BOOLEAN; LO,HI:INTEGER}
{Tests the result of an operand for correctness}
BEGIN
  IF CKABS AND NOT (RESULT.ATTRIBUTE IN [ABS,DEFABS,DEFREG,DEFRP,DEFCC,DEFIR])
   THEN
    BEGIN
      ERROR(24{operand not absolute});
      CHECKOPERAND:=FALSE;
    END
  ELSE IF CKRANGE AND
        ((RESULT.OFFSETORVALUE<LO) OR (RESULT.OFFSETORVALUE>HI)) THEN
    BEGIN
      ERROR(2{operand out of range});
      CHECKOPERAND:=FALSE;
    END
  ELSE IF CKSPCSTK AND (SPCIALSTKINDEX<>-1) THEN
    BEGIN
      ERROR(25{illegal use of special symbols});
      SPCIALSTKINDEX:=-1;
      CHECKOPERAND:=TRUE {operand maybe ok - just warning}
    END
  ELSE CHECKOPERAND:=TRUE;
END;

FUNCTION EXPRESS; {OPERANDREQUIRED:BOOLEAN}
TYPE  STACKTYPE=PACKED RECORD     {expression evaluator stack}
         TIPE:TOKENS;
         ATRIB:ATRIBUTETYPE;
         VALUE:INTEGER
      END;
VAR  STKINDEX,COUNT:INTEGER;
     STK:ARRAY[0..10] OF STACKTYPE;
{The value and type of the calculation should be returned in the
 variable record RESULT}

PROCEDURE EXPREXIT;
BEGIN
  ERROR(26{ill formed expression});
  WHILE (LEXTOKEN<>ENDLINE) DO LEX;
  EXPRESS:=FALSE;
  EXIT(EXPRESS);
END;

PROCEDURE EXPREND;
BEGIN
  IF (LEXTOKEN IN [OPENPAREN,EQUAL,NOTEQUAL]) THEN
    BEGIN
      SPCIALSTKINDEX:=SPCIALSTKINDEX + 1;
      SPECIALSTK[SPCIALSTKINDEX]:=LEXTOKEN;
    END;
  IF STKINDEX=-1 THEN
    IF LEXTOKEN=OPENPAREN THEN
      BEGIN
        EXPRESS:=FALSE;
        EXIT(EXPRESS);
      END
    ELSE IF OPERANDREQUIRED THEN
      BEGIN
        ERROR(27{not enough operands});
        EXPRESS:=FALSE;
      END
    ELSE EXPRESS:=FALSE
  ELSE IF (STKINDEX=0) AND (STK[STKINDEX].TIPE=TNULL) THEN
    BEGIN
      RESULT.OFFSETORVALUE:=STK[STKINDEX].VALUE;
      RESULT.ATTRIBUTE:=STK[STKINDEX].ATRIB;
      RELOCATE.ATTRIBUTE:=RESULT.ATTRIBUTE;
      RELOCATE.OFFSETORVALUE:=RESULT.OFFSETORVALUE;
      EXPRESS:=TRUE
    END
  ELSE IF (STKINDEX=1) AND (STK[0].TIPE=TNULL) AND
   (STK[STKINDEX].TIPE IN [PLUS,MINUS,ASTERISK]) THEN
    BEGIN
      SPCIALSTKINDEX:=SPCIALSTKINDEX + 1;
      CASE STK[STKINDEX].TIPE OF
        PLUS:SPECIALSTK[SPCIALSTKINDEX]:=AUTOINCR;
        MINUS:SPECIALSTK[SPCIALSTKINDEX]:=AUTODECR;
        ASTERISK:SPECIALSTK[SPCIALSTKINDEX]:=LEXTOKEN
      END;
      RESULT.OFFSETORVALUE:=STK[0].VALUE;
      RESULT.ATTRIBUTE:=STK[0].ATRIB;
      RELOCATE.ATTRIBUTE:=RESULT.ATTRIBUTE;
      RELOCATE.OFFSETORVALUE:=RESULT.OFFSETORVALUE;
      EXPRESS:=TRUE;
    END
  ELSE EXPRESS:=FALSE;
  EXIT(EXPRESS);
END;

PROCEDURE OPERFOLD;
VAR  LATTRIBUTE,RATTRIBUTE:ATRIBUTETYPE;
     KLUDGETYPE:TOKENS;
     RVALUE:INTEGER;
     NOTUNARY,BOTHABSOLUTE:BOOLEAN;
BEGIN
  IF (STK[STKINDEX-1].TIPE<>OPNBROKEN) THEN
    BEGIN
      IF STKINDEX>=2 THEN NOTUNARY:=(STK[STKINDEX-2].TIPE<>OPNBROKEN)
        ELSE NOTUNARY:=FALSE;
      IF NOTUNARY THEN
       BEGIN
         IF STK[STKINDEX-2].TIPE=TNULL THEN
         BEGIN
           LATTRIBUTE:=STK[STKINDEX-2].ATRIB;
           RATTRIBUTE:=STK[STKINDEX].ATRIB;
           IF (LATTRIBUTE IN [DEFABS,DEFRP,DEFREG,DEFCC,DEFIR]) THEN
             LATTRIBUTE:=ABS;
           IF (RATTRIBUTE IN [DEFABS,DEFRP,DEFREG,DEFCC,DEFIR]) THEN
             RATTRIBUTE:=ABS;
           BOTHABSOLUTE:=((LATTRIBUTE=ABS) AND (RATTRIBUTE=ABS))
             OR NOT (JUMPINFO OR RELOCATE.UNDEF);
           RVALUE:=STK[STKINDEX].VALUE;
           KLUDGETYPE:=STK[STKINDEX-1].TIPE;
           WITH STK[STKINDEX-2] DO
           BEGIN
             IF NOT (KLUDGETYPE IN [PLUS,MINUS,BITWISEOR,AMPERSAND,
               EXCLUSIVEOR,ASTERISK,DIVIDE,MODULO]) THEN
                 EXPREXIT
             ELSE CASE KLUDGETYPE OF
               PLUS:IF (LATTRIBUTE=ABS) OR (RATTRIBUTE=ABS) THEN
                      BEGIN
                        VALUE:=VALUE + RVALUE;
                        IF RATTRIBUTE<>ABS THEN ATRIB:=RATTRIBUTE;
                      END
                    ELSE EXPREXIT;
              MINUS:IF (RATTRIBUTE=ABS) OR
                      ((RATTRIBUTE<>ABS) AND (LATTRIBUTE=RATTRIBUTE)) THEN
                      BEGIN
                        VALUE:=VALUE - RVALUE;
                        IF RATTRIBUTE<>ABS THEN ATRIB:=ABS;
                      END
                    ELSE EXPREXIT;
          BITWISEOR:IF BOTHABSOLUTE THEN
                      VALUE:=ORD(ODD(VALUE) OR ODD(RVALUE))
                    ELSE EXPREXIT;
          AMPERSAND:IF BOTHABSOLUTE THEN
                      VALUE:=ORD(ODD(VALUE) AND ODD(RVALUE))
                    ELSE EXPREXIT;
        EXCLUSIVEOR:IF BOTHABSOLUTE THEN
                      VALUE:=ORD((ODD(VALUE) AND NOT ODD(RVALUE)) OR
                          (NOT ODD(VALUE) AND ODD(RVALUE)))
                    ELSE EXPREXIT;
           ASTERISK:IF BOTHABSOLUTE THEN
                      VALUE:=VALUE*RVALUE
                    ELSE EXPREXIT;
             DIVIDE:IF BOTHABSOLUTE THEN
                      VALUE:=VALUE DIV RVALUE
                    ELSE EXPREXIT;
             MODULO:IF BOTHABSOLUTE THEN
                      VALUE:=VALUE MOD RVALUE
                    ELSE EXPREXIT
             END;{CASE}
           END;{WITH}
           STKINDEX:=STKINDEX-2;
         END ELSE EXPREXIT;
       END
     ELSE IF STK[STKINDEX].ATRIB=ABS THEN {check for unary operator}
       WITH STK[STKINDEX-1] DO
         BEGIN
           CASE TIPE OF
             MINUS:VALUE:=-STK[STKINDEX].VALUE;
             PLUS:VALUE:=STK[STKINDEX].VALUE;
             ONESCOMPLEMENT:VALUE:=-STK[STKINDEX].VALUE - 1
           END;
           STKINDEX:=STKINDEX - 1;
           TIPE:=TNULL;
           ATRIB:=ABS;
         END
     ELSE EXPREXIT; {whatever he wanted i couldn't do}
    END;
END;

BEGIN  {EXPRESS}
  RELOCATE:=NULLREL;
  STKINDEX:=-1;
  REPEAT
    IF EXPRSSADVANCE THEN LEX
      ELSE EXPRSSADVANCE:=TRUE;
    IF NOT (LEXTOKEN IN [PLUS,MINUS,BITWISEOR,AMPERSAND,EXCLUSIVEOR,
      ASTERISK,DIVIDE,MODULO,AUTOINCR,AUTODECR,EQUAL,NOTEQUAL,TINTERP,
      ENDLINE,COMMA,OPNBROKEN,OPENPAREN,NUMBERSIGN,ATSIGN,LOCCTR,
      TNOT,CLOSEPAREN,CLSBROKEN,ONESCOMPLEMENT,
      CONSTANT,TSTRING,LOCLABEL,TIDENTIFIER]) THEN EXPREXIT
    ELSE
    WITH STK[STKINDEX+1] DO
      CASE LEXTOKEN OF
        PLUS,MINUS,BITWISEOR,AMPERSAND,EXCLUSIVEOR,
        DIVIDE,MODULO,OPNBROKEN,ONESCOMPLEMENT:
                   BEGIN
                     STKINDEX:=STKINDEX + 1;
                     TIPE:=LEXTOKEN;
                   END;
          ASTERISK:IF STKINDEX=-1 THEN
                     IF LCCHAR='*' THEN
                       BEGIN
                         STKINDEX:=STKINDEX + 1;
                         IF CODESECTION=A THEN VALUE:=ALC
                           ELSE VALUE:=LASTLC;
                         RELOCATE.TIPE:=LCREL;
                         ATRIB:=LABELS;
                         TIPE:=TNULL;
                         IF STKINDEX>0 THEN OPERFOLD;
                       END
                     ELSE
                       BEGIN
                         SPCIALSTKINDEX:=SPCIALSTKINDEX + 1;
                         SPECIALSTK[SPCIALSTKINDEX]:=LEXTOKEN;
                       END
                   ELSE
                     BEGIN
                       STKINDEX:=STKINDEX + 1;
                       TIPE:=LEXTOKEN;
                     END;
            LOCCTR:BEGIN
                     STKINDEX:=STKINDEX + 1;
                     IF CODESECTION=A THEN VALUE:=ALC
                       ELSE VALUE:=LASTLC;
                     IF RELOCATE=NULLREL THEN
                       RELOCATE.TIPE:=LCREL
                     ELSE IF RELOCATE.TIPE=LCREL THEN
                       RELOCATE:=NULLREL;
                     ATRIB:=LABELS;
                     TIPE:=TNULL;
                     IF STKINDEX>0 THEN OPERFOLD;
                   END;
  CONSTANT,TSTRING:BEGIN
                     STKINDEX:=STKINDEX + 1;
                     VALUE:=0;
                     IF LEXTOKEN=CONSTANT THEN VALUE:=CONSTVAL
                     ELSE IF LENGTH(STRVAL)<=2 THEN
                       FOR COUNT:=1 TO LENGTH(STRVAL) DO
                         VALUE:=VALUE*256 + ORD(STRVAL[COUNT])
                     ELSE EXPREXIT;
                     ATRIB:=ABS; {Constants are absolute}
                     TIPE:=TNULL;
                     IF STKINDEX>0 THEN OPERFOLD;
                   END;
         LOCLABEL: BEGIN
                     IF RELOCATE.UNDEF THEN
                       BEGIN
                         IF TEMP[TEMPLABEL].TEMPATRIB=UNKNOWN THEN
                           ERROR(28{cannot handle this relative});
                       END
                     ELSE
                       BEGIN
                         IF TEMP[TEMPLABEL].TEMPATRIB=UNKNOWN THEN
                           RELOCATE.UNDEF:=TRUE;
                         RELOCATE.TIPE:=LLREL;
                         RELOCATE.TEMPLABEL:=TEMPLABEL;
                       END;
                     STKINDEX:=STKINDEX + 1;
                     VALUE:=TEMP[TEMPLABEL].DEFOFFSET;
                     ATRIB:=LABELS;
                     TIPE:=TNULL;
                     IF STKINDEX>0 THEN OPERFOLD;
                   END;
          TINTERP: BEGIN
                     RELOCATE.TIPE:=EXTERNREL;
                     STKINDEX:=STKINDEX+1;
                     VALUE:=0;
                     ATRIB:=INTERPS;
                     TIPE:=TNULL;
                     IF STKINDEX>0 THEN OPERFOLD;
                   END;
      TIDENTIFIER: BEGIN
                     STKINDEX:=STKINDEX + 1;
                     CASE SYM^.ATTRIBUTE OF
                       ABS,DEFABS,DEFRP,DEFREG,DEFCC,DEFIR:
                                   BEGIN
                                     VALUE:=SYM^.OFFSETORVALUE;
                                     ATRIB:=SYM^.ATTRIBUTE;
                                   END;
                       UNKNOWN,DEFUNKNOWN:
                                   BEGIN
                                     VALUE:=0;
                                     ATRIB:=LABELS;
                                     IF RELOCATE.UNDEF THEN
                                       ERROR(28{cannot handle this relative})
                                     ELSE
                                       BEGIN
                                         RELOCATE.UNDEF:=TRUE;
                                         RELOCATE.TIPE:=LABELREL;
                                         RELOCATE.SYM:=SYM;
                                       END;
                                   END;
                       DEFS,LABELS:BEGIN
                                     VALUE:=SYM^.OFFSETORVALUE;
                                     ATRIB:=LABELS;
                                     IF NOT RELOCATE.UNDEF THEN
                                       BEGIN
                                         RELOCATE.TIPE:=LABELREL;
                                         RELOCATE.SYM:=SYM;
                                       END;
                                   END;
                       PROCS,FUNCS:BEGIN
                                     VALUE:=0;
                                     ATRIB:=LABELS;
                                     IF NOT RELOCATE.UNDEF THEN
                                       BEGIN
                                         RELOCATE.TIPE:=LABELREL;
                                         RELOCATE.SYM:=SYM;
                                       END;
                                   END;
                       CONSTS,PUBLICS,PRIVATES,REFS,INTERPS:
                                   BEGIN
                                     VALUE:=0;
                                     ATRIB:=SYM^.ATTRIBUTE;
                                     IF NOT RELOCATE.UNDEF THEN
                                       BEGIN
                                         RELOCATE.TIPE:=EXTERNREL;
                                         RELOCATE.SYM:=SYM;
                                       END;
                                   END
                     END;  {case}
                     TIPE:=TNULL;
                     IF STKINDEX>0 THEN OPERFOLD;
                   END;
        ENDLINE,COMMA,OPENPAREN,EQUAL,NOTEQUAL:
                   EXPREND;
        NUMBERSIGN,ATSIGN,TNOT,AUTOINCR,AUTODECR,CLOSEPAREN:
                   BEGIN
                     SPCIALSTKINDEX:=SPCIALSTKINDEX + 1;
                     SPECIALSTK[SPCIALSTKINDEX]:=LEXTOKEN;
                   END;
         CLSBROKEN:BEGIN
                     IF STKINDEX=0 THEN EXPREXIT;
                     IF (STK[STKINDEX-1].TIPE<>OPNBROKEN) THEN EXPREXIT;
                     STK[STKINDEX-1].VALUE:=STK[STKINDEX].VALUE;
                     STK[STKINDEX-1].ATRIB:=STK[STKINDEX].ATRIB;
                     STK[STKINDEX-1].TIPE:=STK[STKINDEX].TIPE;
                     STKINDEX:=STKINDEX - 1;
                     IF (STK[STKINDEX].TIPE<>TNULL) THEN EXPREXIT;
                     IF STKINDEX>0 THEN OPERFOLD;
                   END
      END; {CASE STATEMENT}
  UNTIL FALSE;
END;

(*
 * UCSD PASCAL - Version I.5
 * Copyright (C) 1978, 1979 Regents of the University of California
 * All Rights Reserved
 *
 * Permission to use, copy, modify and distribute any part of UCSD
 * PASCAL solely authored by UC authors before June 1, 1979 for
 * educational, research and non-profit purposes, without fee, and
 * without a written agreement is hereby granted, provided that the
 * above copyright notice, this paragraph and the following three
 * paragraphs appear in all copies.
 *
 * Those desiring to incorporate UCSD PASCAL into commercial products or
 * use for commercial purposes should contact the Technology Transfer &
 * Intellectual Property Services, University of California, San Diego,
 * 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910,
 * Ph: (858) 534-5815, Fax: (858) 534-7345, E-Mail: invent@ucsd.edu.
 *
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
 * FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES,
 * INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF UCSD PASCAL, EVEN IF
 * THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
 * THE SOFTWARE PROVIDED HEREIN IS ON AN "AS IS" BASIS, AND THE UNIVERSITY
 * OF CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,
 * UPDATES, ENHANCEMENTS, OR MODIFICATIONS. THE UNIVERSITY OF CALIFORNIA
 * MAKES NO REPRESENTATIONS AND EXTENDS NO WARRANTIES OF ANY KIND,
 * EITHER IMPLIED OR EXPRESS, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR
 * THAT THE USE OF UCSD PASCAL WILL NOT INFRINGE ANY PATENT, TRADEMARK OR
 * OTHER RIGHTS.
 *
 * Case Number: SD1991-807 (2006)
 * http://invent.ucsd.edu/technology/cases/1995-prior/SD1991-807.shtml
 *)

(* Copyright (C) 1979, Regents of The University of California          *)
(* Permission to copy or distribute this software or                    *)
(* Documentation in Hard of Soft Copy Granted Only by                   *)
(* Written License Obtained From the Institute for Information Systems  *)
PROGRAM EDITTORT11;
CONST
  EMPTY = 512;
  PERM = 1024;
  TENTATIVE = 256;
  ENDMARK = 2048;
  CR = 13;
  LF = 10;

TYPE
  CHARS = PACKED ARRAY [0..2] OF CHAR;
  RTNAME = PACKED ARRAY [0..9] OF CHAR;
  FILENTRY = RECORD
    STATUSWORD: INTEGER;
    FIRST: INTEGER;
    SECOND: INTEGER;
    EXTENSION: INTEGER;
    LGTH: INTEGER;
    FILLER: INTEGER;
    DATE: INTEGER
  END;

  DIREC = RECORD CASE BOOLEAN OF
    FALSE: (BUF: PACKED ARRAY [0..1023] OF CHAR);
    TRUE:  (SEGSAVAIL: INTEGER;
            NEXTSEG: INTEGER;
            HIGHSEG: INTEGER;
            FILLER: INTEGER;
            BEGINSEG: INTEGER;
            ENTRY: ARRAY [0..71] OF FILENTRY)
  END;

VAR
  POSITION, STARTBLOCK, POUT, BLOCK: INTEGER;
  CH:CHAR;
  WANTINFILE:BOOLEAN;
  UNITP: INTEGER;
  RT11: DIREC;
  WANTED:RTNAME;
  OUTBUF:PACKED ARRAY[0..511] OF CHAR;
  FIN:FILE OF CHAR;

PROCEDURE DERAD50 (WORD: INTEGER; VAR STORE: CHARS);
VAR
  I: INTEGER;
  NEG: BOOLEAN;
BEGIN
  NEG := WORD < 0;
  IF NEG THEN WORD := WORD + 32767 + 1;
  STORE[2] := CHR (WORD MOD 40);
  IF NEG THEN
    BEGIN
      WORD := WORD DIV 40 + 819;
      IF STORE[2] >= CHR(32) THEN WORD := WORD + 1;
      STORE[2] := CHR( (ORD(STORE[2])+8) MOD 40)
    END
  ELSE
    WORD := WORD DIV 40;
  STORE[1] := CHR (WORD MOD 40);
  STORE[0] := CHR (WORD DIV 40);
  FOR I := 0 TO 2 DO
    BEGIN
      WORD := ORD(STORE[I]);
      IF WORD = 0 THEN WORD := ORD (' ')
      ELSE
        IF WORD <= 26 THEN
          WORD := WORD + 64
        ELSE
          IF WORD >= 30 THEN
            WORD := WORD + 18
          ELSE (*ERROR-CHANGE TO BLANK*)
            WORD := ORD (' ');
      STORE[I] := CHR(WORD)
    END
END (*DERAD50*);

PROCEDURE ENRAD50 (NAME: CHARS; VAR WORD: INTEGER);
VAR
  CODES: ARRAY [0..2] OF INTEGER;
  I: INTEGER;
BEGIN
  FOR I:= 0 TO 2 DO
    BEGIN
      IF ORD(NAME[I]) >=65
          THEN CODES[I] := ORD(NAME[I]) - 64
          ELSE IF ORD(NAME[I]) >=48
                   THEN CODES[I] := ORD(NAME[I]) - 18
                   ELSE CODES[I] := 0;
    END;
  WORD := CODES[2] + (CODES[1] * 40) + (CODES[0] * 1600)
END (*ENRAD50*);

PROCEDURE SHOWDIR;
VAR I, BLOCK: INTEGER;
    OUT: CHARS;
BEGIN
  WRITELN;
  WRITELN ('  TITLE      SIZE  START');
  WRITELN;
  I := 0;
  BLOCK := RT11.BEGINSEG;
  WITH RT11 DO
  WHILE ENTRY[I].STATUSWORD <> ENDMARK DO WITH ENTRY[I] DO
    BEGIN
      IF STATUSWORD = PERM THEN
        BEGIN
          DERAD50 (FIRST, OUT);
          WRITE (OUT);
          DERAD50 (SECOND, OUT);
          WRITE (OUT);
          DERAD50 (EXTENSION, OUT);
          IF OUT <> '   ' THEN WRITE ('.',OUT) ELSE WRITE (' ':4);
        END
      ELSE
        WRITE (' <UNUSED> ');
      WRITELN (LGTH:6, BLOCK:6);
      BLOCK := BLOCK + LGTH;
      I := I + 1
    END;
END (*SHOWDIR*);

FUNCTION LOCATEFILE:BOOLEAN;
VAR I,J,FILESIZE:INTEGER;
    FOUND: BOOLEAN;
    OUT: CHARS;
    TITLE: RTNAME;
BEGIN
  I:=0;
  FOUND:=FALSE;
  BLOCK:=RT11.BEGINSEG;
  WITH RT11 DO
    WHILE (ENTRY[I].STATUSWORD<>ENDMARK) AND (NOT FOUND) DO
      WITH ENTRY[I] DO
        BEGIN
          IF STATUSWORD=PERM THEN
            BEGIN
              DERAD50(FIRST,OUT);
              MOVERIGHT(OUT[0],TITLE[0],3);
              DERAD50(SECOND,OUT);
              MOVERIGHT(OUT[0],TITLE[3],3);
              DERAD50(EXTENSION,OUT);
              IF OUT='   ' THEN
                FOR J:=6 TO 9 DO TITLE[J]:=' '
              ELSE
                BEGIN
                  TITLE[6]:='.';
                  MOVERIGHT(OUT[0],TITLE[7],3);
                END;
            END;
          FOUND:=(WANTED=TITLE);
          IF NOT FOUND THEN
            BEGIN
              BLOCK:=BLOCK+LGTH;
              I:=I+1;
            END;
        END (*WHILE*);
    IF FOUND THEN
      BEGIN
        WRITELN;
        FILESIZE:=RT11.ENTRY[I].LGTH;
        WRITELN(TITLE,'  SIZE:',FILESIZE,', START:',BLOCK);
      END
    ELSE BLOCK:=-1; (*SIGNAL FAILURE WITH IMPOSSIBLE VALUE*)
  LOCATEFILE:=FOUND;
END (*LOCATEFILE*);

FUNCTION FINDSPACE:BOOLEAN;
VAR I:INTEGER;
    INN:CHARS;
BEGIN
  FINDSPACE:=FALSE;
  I:=0;
  BLOCK:=RT11.BEGINSEG;
  POSITION:=0;
  WITH RT11 DO
    BEGIN
      WHILE ENTRY[I+1].STATUSWORD <> ENDMARK DO
        WITH ENTRY[I] DO
          BEGIN
            BLOCK:=BLOCK+LGTH;
            I:=I+1;
            POSITION:=I
          END;
      IF (ENTRY[POSITION].STATUSWORD = PERM) OR
         (POSITION >= 70)
      THEN
        BEGIN
          WRITELN;
          WRITELN('No space at end of RT11 disk')
        END
      ELSE
        BEGIN
          ENTRY[POSITION+2]:=ENTRY[POSITION+1];
          ENTRY[POSITION+1]:=ENTRY[POSITION];
          ENTRY[POSITION+1].LGTH:=0;
          WITH ENTRY[POSITION] DO
            BEGIN
              MOVERIGHT(WANTED[0],INN[0],3);
              ENRAD50(INN,FIRST);
              MOVERIGHT(WANTED[3],INN[0],3);
              ENRAD50(INN,SECOND);
              MOVERIGHT(WANTED[7],INN[0],3);
              ENRAD50(INN,EXTENSION);
              STATUSWORD:=TENTATIVE;
            END;
          UNITWRITE(UNITP,RT11,1024,6);
          STARTBLOCK:=BLOCK;
          WRITELN;
          WRITELN('File established at block ',BLOCK:6);
          FINDSPACE:=TRUE
        END (*ELSE*)
    END (*WITH RT11*)
END (*FINDSPACE*);

PROCEDURE CLOSERT11;
VAR  FILESIZE: INTEGER;
BEGIN
  FILESIZE:=BLOCK-STARTBLOCK;
  WRITELN;
  WRITELN('New File Length = ', FILESIZE:6, ' Blocks');
  RT11.ENTRY[POSITION+1].LGTH:=RT11.ENTRY[POSITION].LGTH-FILESIZE;
  RT11.ENTRY[POSITION].LGTH:=FILESIZE;
  RT11.ENTRY[POSITION].STATUSWORD:=PERM;
  UNITWRITE(UNITP,RT11,1024,6)
END (*CLOSERT11*);


FUNCTION GETWANTED:BOOLEAN;
VAR I,J:INTEGER;
    S:STRING;
BEGIN
  WRITE('Enter title of new RT11 text file:');
  GETWANTED:=FALSE;
  READLN(S);
  IF LENGTH(S)>0 THEN
    BEGIN
      I:=POS('.',S);
      IF I<>-1 THEN
        FOR J:=I TO 6 DO INSERT(' ',S,I);
      WANTED:='          ';
      MOVERIGHT(S[1],WANTED[0],LENGTH(S));
      IF LOCATEFILE
          THEN BEGIN
                 WRITELN;
                 WRITE('File Exists - May Not Be Re-written');
                 WRITELN
               END
          ELSE GETWANTED:=TRUE;
    END;
END (*GETWANTED*);

FUNCTION GETINNAME:BOOLEAN;
VAR CH:CHAR;
    S:STRING;
BEGIN
  GETINNAME:=FALSE;
  WRITE('Enter title of input Text file:');
  READLN(S);
  IF LENGTH(S)>0 THEN
    BEGIN
      RESET(FIN,S);
      GETINNAME:=TRUE;
    END
END (*GETINNAME*);

PROCEDURE RTPUT(COUT: CHAR);
BEGIN
  IF POUT = 512 THEN
    BEGIN
      UNITWRITE(UNITP,OUTBUF,512,BLOCK);
      BLOCK:=BLOCK+1;
      POUT:=0;
      FILLCHAR(OUTBUF,512,CHR(0))
    END;
  OUTBUF[POUT]:=COUT;
  POUT:=POUT+1
END (*RTPUT*);

PROCEDURE COPY;
VAR
  INCH:CHAR;

BEGIN
  FILLCHAR(OUTBUF,512,CHR(0));
  POUT:=0;
  WRITELN;
  WHILE NOT EOF(FIN) DO
    BEGIN
      IF EOLN(FIN) THEN
        BEGIN
          READLN(FIN);WRITELN;
          RTPUT(CHR(CR));RTPUT(CHR(LF))
        END
       ELSE
        BEGIN
          READ(FIN,INCH);WRITE(INCH);
          RTPUT(INCH)
        END
    END(*WHILE*);
  IF POUT <> 0 THEN
    BEGIN
      UNITWRITE(UNITP,OUTBUF,512,BLOCK);
      BLOCK:=BLOCK+1
    END
END (*COPY*);


BEGIN (*MAIN*)
  REPEAT
    WRITE('Place RT11 disk in drive, indicate unit number [4,5], then (C/R)');
    READLN(UNITP);
    UNITREAD (UNITP, RT11, 1024, 6);  (*READ BLOCKS 6-7 = RT11 DIRECTORY*)
  UNTIL (UNITP IN [4,5]) AND (IORESULT = 0);
  WRITE('Display the directory? (y/n)');
  READ(CH);
  IF CH IN ['Y','y'] THEN SHOWDIR;
  WRITELN;
  IF GETWANTED THEN
    BEGIN
      IF GETINNAME THEN
        BEGIN
          IF FINDSPACE THEN
             BEGIN
               COPY;
               CLOSERT11;
             END;
          CLOSE(FIN,NORMAL)
        END
    END;
END.
